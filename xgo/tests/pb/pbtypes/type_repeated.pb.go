// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/types/type_repeated.proto

package pbtypes

import (
	_ "github.com/yu31/protoc-plugin-default/xgo/pb/pbdefault"
	pbexternal "github.com/yu31/protoc-plugin-default/xgo/tests/pb/pbexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnumRepeated1 used tests cases in this file.
type EnumRepeated1 int32

const (
	EnumRepeated1_Zero  EnumRepeated1 = 0
	EnumRepeated1_One   EnumRepeated1 = 2
	EnumRepeated1_Two   EnumRepeated1 = 3
	EnumRepeated1_Three EnumRepeated1 = 5
	EnumRepeated1_Four  EnumRepeated1 = 6
	EnumRepeated1_Five  EnumRepeated1 = 7
	EnumRepeated1_Six   EnumRepeated1 = 9
	EnumRepeated1_Seven EnumRepeated1 = 11
	EnumRepeated1_Eight EnumRepeated1 = 12
	EnumRepeated1_Nine  EnumRepeated1 = 15
	EnumRepeated1_Ten   EnumRepeated1 = 17
)

// Enum value maps for EnumRepeated1.
var (
	EnumRepeated1_name = map[int32]string{
		0:  "Zero",
		2:  "One",
		3:  "Two",
		5:  "Three",
		6:  "Four",
		7:  "Five",
		9:  "Six",
		11: "Seven",
		12: "Eight",
		15: "Nine",
		17: "Ten",
	}
	EnumRepeated1_value = map[string]int32{
		"Zero":  0,
		"One":   2,
		"Two":   3,
		"Three": 5,
		"Four":  6,
		"Five":  7,
		"Six":   9,
		"Seven": 11,
		"Eight": 12,
		"Nine":  15,
		"Ten":   17,
	}
)

func (x EnumRepeated1) Enum() *EnumRepeated1 {
	p := new(EnumRepeated1)
	*p = x
	return p
}

func (x EnumRepeated1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumRepeated1) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_cases_types_type_repeated_proto_enumTypes[0].Descriptor()
}

func (EnumRepeated1) Type() protoreflect.EnumType {
	return &file_tests_proto_cases_types_type_repeated_proto_enumTypes[0]
}

func (x EnumRepeated1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumRepeated1.Descriptor instead.
func (EnumRepeated1) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{0}
}

// MessageRepeated1 used tests cases in this file.
type MessageRepeated1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageRepeated1) Reset() {
	*x = MessageRepeated1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRepeated1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRepeated1) ProtoMessage() {}

func (x *MessageRepeated1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRepeated1.ProtoReflect.Descriptor instead.
func (*MessageRepeated1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{0}
}

func (x *MessageRepeated1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageRepeated1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageRepeated1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

// Test cases for ignore_empty is false.
type TypeRepeated1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1    []string                           `protobuf:"bytes,1,rep,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FInt32      []int32                            `protobuf:"varint,11,rep,packed,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty"`
	FInt64      []int64                            `protobuf:"varint,12,rep,packed,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty"`
	FUint32     []uint32                           `protobuf:"varint,13,rep,packed,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty"`
	FUint64     []uint64                           `protobuf:"varint,14,rep,packed,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty"`
	FSint32     []int32                            `protobuf:"zigzag32,15,rep,packed,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty"`
	FSint64     []int64                            `protobuf:"zigzag64,16,rep,packed,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty"`
	FSfixed32   []int32                            `protobuf:"fixed32,17,rep,packed,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty"`
	FSfixed64   []int64                            `protobuf:"fixed64,18,rep,packed,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty"`
	FFixed32    []uint32                           `protobuf:"fixed32,19,rep,packed,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty"`
	FFixed64    []uint64                           `protobuf:"fixed64,20,rep,packed,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty"`
	FFloat      []float32                          `protobuf:"fixed32,21,rep,packed,name=f_float,json=fFloat,proto3" json:"f_float,omitempty"`
	FDouble     []float64                          `protobuf:"fixed64,22,rep,packed,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	FBool1      []bool                             `protobuf:"varint,31,rep,packed,name=f_bool1,json=fBool1,proto3" json:"f_bool1,omitempty"`
	FBytes1     [][]byte                           `protobuf:"bytes,41,rep,name=f_bytes1,json=fBytes1,proto3" json:"f_bytes1,omitempty"`
	FEnum1      []EnumRepeated1                    `protobuf:"varint,51,rep,packed,name=f_enum1,json=fEnum1,proto3,enum=type_repeated.EnumRepeated1" json:"f_enum1,omitempty"`
	FEnum2      []EnumRepeated1                    `protobuf:"varint,52,rep,packed,name=f_enum2,json=fEnum2,proto3,enum=type_repeated.EnumRepeated1" json:"f_enum2,omitempty"`
	FEnum3      []pbexternal.Month1                `protobuf:"varint,53,rep,packed,name=f_enum3,json=fEnum3,proto3,enum=external.Month1" json:"f_enum3,omitempty"`
	FEnum4      []pbexternal.Month2                `protobuf:"varint,54,rep,packed,name=f_enum4,json=fEnum4,proto3,enum=external.Month2" json:"f_enum4,omitempty"`
	FEnum5      []pbexternal.EnumWeek1_Week        `protobuf:"varint,55,rep,packed,name=f_enum5,json=fEnum5,proto3,enum=external.EnumWeek1_Week" json:"f_enum5,omitempty"`
	FEnum6      []pbexternal.EnumWeek2_Embed1_Week `protobuf:"varint,56,rep,packed,name=f_enum6,json=fEnum6,proto3,enum=external.EnumWeek2_Embed1_Week" json:"f_enum6,omitempty"`
	FEnum7      []EnumCommon1                      `protobuf:"varint,57,rep,packed,name=f_enum7,json=fEnum7,proto3,enum=private.EnumCommon1" json:"f_enum7,omitempty"`
	FDuration1  []*durationpb.Duration             `protobuf:"bytes,61,rep,name=f_duration1,json=fDuration1,proto3" json:"f_duration1,omitempty"`
	FTimestamp1 []*timestamppb.Timestamp           `protobuf:"bytes,62,rep,name=f_timestamp1,json=fTimestamp1,proto3" json:"f_timestamp1,omitempty"`
	FMessage1   []*MessageRepeated1                `protobuf:"bytes,71,rep,name=f_message1,json=fMessage1,proto3" json:"f_message1,omitempty"`
	FMessage2   []*MessageRepeated1_Embed1         `protobuf:"bytes,72,rep,name=f_message2,json=fMessage2,proto3" json:"f_message2,omitempty"`
	FMessage3   []*MessageRepeated1_Embed1_Embed2  `protobuf:"bytes,73,rep,name=f_message3,json=fMessage3,proto3" json:"f_message3,omitempty"`
	FMessage4   []*pbexternal.External1            `protobuf:"bytes,74,rep,name=f_message4,json=fMessage4,proto3" json:"f_message4,omitempty"`
	FMessage5   []*pbexternal.External2_Embed1     `protobuf:"bytes,75,rep,name=f_message5,json=fMessage5,proto3" json:"f_message5,omitempty"`
	FMessage6   []*MessageCommon1                  `protobuf:"bytes,76,rep,name=f_message6,json=fMessage6,proto3" json:"f_message6,omitempty"`
	FAny1       []*anypb.Any                       `protobuf:"bytes,91,rep,name=f_any1,json=fAny1,proto3" json:"f_any1,omitempty"`
}

func (x *TypeRepeated1) Reset() {
	*x = TypeRepeated1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRepeated1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRepeated1) ProtoMessage() {}

func (x *TypeRepeated1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRepeated1.ProtoReflect.Descriptor instead.
func (*TypeRepeated1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{1}
}

func (x *TypeRepeated1) GetFString1() []string {
	if x != nil {
		return x.FString1
	}
	return nil
}

func (x *TypeRepeated1) GetFInt32() []int32 {
	if x != nil {
		return x.FInt32
	}
	return nil
}

func (x *TypeRepeated1) GetFInt64() []int64 {
	if x != nil {
		return x.FInt64
	}
	return nil
}

func (x *TypeRepeated1) GetFUint32() []uint32 {
	if x != nil {
		return x.FUint32
	}
	return nil
}

func (x *TypeRepeated1) GetFUint64() []uint64 {
	if x != nil {
		return x.FUint64
	}
	return nil
}

func (x *TypeRepeated1) GetFSint32() []int32 {
	if x != nil {
		return x.FSint32
	}
	return nil
}

func (x *TypeRepeated1) GetFSint64() []int64 {
	if x != nil {
		return x.FSint64
	}
	return nil
}

func (x *TypeRepeated1) GetFSfixed32() []int32 {
	if x != nil {
		return x.FSfixed32
	}
	return nil
}

func (x *TypeRepeated1) GetFSfixed64() []int64 {
	if x != nil {
		return x.FSfixed64
	}
	return nil
}

func (x *TypeRepeated1) GetFFixed32() []uint32 {
	if x != nil {
		return x.FFixed32
	}
	return nil
}

func (x *TypeRepeated1) GetFFixed64() []uint64 {
	if x != nil {
		return x.FFixed64
	}
	return nil
}

func (x *TypeRepeated1) GetFFloat() []float32 {
	if x != nil {
		return x.FFloat
	}
	return nil
}

func (x *TypeRepeated1) GetFDouble() []float64 {
	if x != nil {
		return x.FDouble
	}
	return nil
}

func (x *TypeRepeated1) GetFBool1() []bool {
	if x != nil {
		return x.FBool1
	}
	return nil
}

func (x *TypeRepeated1) GetFBytes1() [][]byte {
	if x != nil {
		return x.FBytes1
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum1() []EnumRepeated1 {
	if x != nil {
		return x.FEnum1
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum2() []EnumRepeated1 {
	if x != nil {
		return x.FEnum2
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum3() []pbexternal.Month1 {
	if x != nil {
		return x.FEnum3
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum4() []pbexternal.Month2 {
	if x != nil {
		return x.FEnum4
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum5() []pbexternal.EnumWeek1_Week {
	if x != nil {
		return x.FEnum5
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum6() []pbexternal.EnumWeek2_Embed1_Week {
	if x != nil {
		return x.FEnum6
	}
	return nil
}

func (x *TypeRepeated1) GetFEnum7() []EnumCommon1 {
	if x != nil {
		return x.FEnum7
	}
	return nil
}

func (x *TypeRepeated1) GetFDuration1() []*durationpb.Duration {
	if x != nil {
		return x.FDuration1
	}
	return nil
}

func (x *TypeRepeated1) GetFTimestamp1() []*timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp1
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage1() []*MessageRepeated1 {
	if x != nil {
		return x.FMessage1
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage2() []*MessageRepeated1_Embed1 {
	if x != nil {
		return x.FMessage2
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage3() []*MessageRepeated1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage3
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage4() []*pbexternal.External1 {
	if x != nil {
		return x.FMessage4
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage5() []*pbexternal.External2_Embed1 {
	if x != nil {
		return x.FMessage5
	}
	return nil
}

func (x *TypeRepeated1) GetFMessage6() []*MessageCommon1 {
	if x != nil {
		return x.FMessage6
	}
	return nil
}

func (x *TypeRepeated1) GetFAny1() []*anypb.Any {
	if x != nil {
		return x.FAny1
	}
	return nil
}

// Test cases for ignore_empty is true.
type TypeRepeated2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1    []string                           `protobuf:"bytes,1,rep,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FInt32      []int32                            `protobuf:"varint,11,rep,packed,name=f_int32,json=fInt32,proto3" json:"f_int32,omitempty"`
	FInt64      []int64                            `protobuf:"varint,12,rep,packed,name=f_int64,json=fInt64,proto3" json:"f_int64,omitempty"`
	FUint32     []uint32                           `protobuf:"varint,13,rep,packed,name=f_uint32,json=fUint32,proto3" json:"f_uint32,omitempty"`
	FUint64     []uint64                           `protobuf:"varint,14,rep,packed,name=f_uint64,json=fUint64,proto3" json:"f_uint64,omitempty"`
	FSint32     []int32                            `protobuf:"zigzag32,15,rep,packed,name=f_sint32,json=fSint32,proto3" json:"f_sint32,omitempty"`
	FSint64     []int64                            `protobuf:"zigzag64,16,rep,packed,name=f_sint64,json=fSint64,proto3" json:"f_sint64,omitempty"`
	FSfixed32   []int32                            `protobuf:"fixed32,17,rep,packed,name=f_sfixed32,json=fSfixed32,proto3" json:"f_sfixed32,omitempty"`
	FSfixed64   []int64                            `protobuf:"fixed64,18,rep,packed,name=f_sfixed64,json=fSfixed64,proto3" json:"f_sfixed64,omitempty"`
	FFixed32    []uint32                           `protobuf:"fixed32,19,rep,packed,name=f_fixed32,json=fFixed32,proto3" json:"f_fixed32,omitempty"`
	FFixed64    []uint64                           `protobuf:"fixed64,20,rep,packed,name=f_fixed64,json=fFixed64,proto3" json:"f_fixed64,omitempty"`
	FFloat      []float32                          `protobuf:"fixed32,21,rep,packed,name=f_float,json=fFloat,proto3" json:"f_float,omitempty"`
	FDouble     []float64                          `protobuf:"fixed64,22,rep,packed,name=f_double,json=fDouble,proto3" json:"f_double,omitempty"`
	FBool1      []bool                             `protobuf:"varint,31,rep,packed,name=f_bool1,json=fBool1,proto3" json:"f_bool1,omitempty"`
	FBytes1     [][]byte                           `protobuf:"bytes,41,rep,name=f_bytes1,json=fBytes1,proto3" json:"f_bytes1,omitempty"`
	FEnum1      []EnumRepeated1                    `protobuf:"varint,51,rep,packed,name=f_enum1,json=fEnum1,proto3,enum=type_repeated.EnumRepeated1" json:"f_enum1,omitempty"`
	FEnum2      []EnumRepeated1                    `protobuf:"varint,52,rep,packed,name=f_enum2,json=fEnum2,proto3,enum=type_repeated.EnumRepeated1" json:"f_enum2,omitempty"`
	FEnum3      []pbexternal.Month1                `protobuf:"varint,53,rep,packed,name=f_enum3,json=fEnum3,proto3,enum=external.Month1" json:"f_enum3,omitempty"`
	FEnum4      []pbexternal.Month2                `protobuf:"varint,54,rep,packed,name=f_enum4,json=fEnum4,proto3,enum=external.Month2" json:"f_enum4,omitempty"`
	FEnum5      []pbexternal.EnumWeek1_Week        `protobuf:"varint,55,rep,packed,name=f_enum5,json=fEnum5,proto3,enum=external.EnumWeek1_Week" json:"f_enum5,omitempty"`
	FEnum6      []pbexternal.EnumWeek2_Embed1_Week `protobuf:"varint,56,rep,packed,name=f_enum6,json=fEnum6,proto3,enum=external.EnumWeek2_Embed1_Week" json:"f_enum6,omitempty"`
	FEnum7      []EnumCommon1                      `protobuf:"varint,57,rep,packed,name=f_enum7,json=fEnum7,proto3,enum=private.EnumCommon1" json:"f_enum7,omitempty"`
	FDuration1  []*durationpb.Duration             `protobuf:"bytes,61,rep,name=f_duration1,json=fDuration1,proto3" json:"f_duration1,omitempty"`
	FTimestamp1 []*timestamppb.Timestamp           `protobuf:"bytes,62,rep,name=f_timestamp1,json=fTimestamp1,proto3" json:"f_timestamp1,omitempty"`
	FMessage1   []*MessageRepeated1                `protobuf:"bytes,71,rep,name=f_message1,json=fMessage1,proto3" json:"f_message1,omitempty"`
	FMessage2   []*MessageRepeated1_Embed1         `protobuf:"bytes,72,rep,name=f_message2,json=fMessage2,proto3" json:"f_message2,omitempty"`
	FMessage3   []*MessageRepeated1_Embed1_Embed2  `protobuf:"bytes,73,rep,name=f_message3,json=fMessage3,proto3" json:"f_message3,omitempty"`
	FMessage4   []*pbexternal.External1            `protobuf:"bytes,74,rep,name=f_message4,json=fMessage4,proto3" json:"f_message4,omitempty"`
	FMessage5   []*pbexternal.External2_Embed1     `protobuf:"bytes,75,rep,name=f_message5,json=fMessage5,proto3" json:"f_message5,omitempty"`
	FMessage6   []*MessageCommon1                  `protobuf:"bytes,76,rep,name=f_message6,json=fMessage6,proto3" json:"f_message6,omitempty"`
	FAny1       []*anypb.Any                       `protobuf:"bytes,91,rep,name=f_any1,json=fAny1,proto3" json:"f_any1,omitempty"`
}

func (x *TypeRepeated2) Reset() {
	*x = TypeRepeated2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeRepeated2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeRepeated2) ProtoMessage() {}

func (x *TypeRepeated2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeRepeated2.ProtoReflect.Descriptor instead.
func (*TypeRepeated2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{2}
}

func (x *TypeRepeated2) GetFString1() []string {
	if x != nil {
		return x.FString1
	}
	return nil
}

func (x *TypeRepeated2) GetFInt32() []int32 {
	if x != nil {
		return x.FInt32
	}
	return nil
}

func (x *TypeRepeated2) GetFInt64() []int64 {
	if x != nil {
		return x.FInt64
	}
	return nil
}

func (x *TypeRepeated2) GetFUint32() []uint32 {
	if x != nil {
		return x.FUint32
	}
	return nil
}

func (x *TypeRepeated2) GetFUint64() []uint64 {
	if x != nil {
		return x.FUint64
	}
	return nil
}

func (x *TypeRepeated2) GetFSint32() []int32 {
	if x != nil {
		return x.FSint32
	}
	return nil
}

func (x *TypeRepeated2) GetFSint64() []int64 {
	if x != nil {
		return x.FSint64
	}
	return nil
}

func (x *TypeRepeated2) GetFSfixed32() []int32 {
	if x != nil {
		return x.FSfixed32
	}
	return nil
}

func (x *TypeRepeated2) GetFSfixed64() []int64 {
	if x != nil {
		return x.FSfixed64
	}
	return nil
}

func (x *TypeRepeated2) GetFFixed32() []uint32 {
	if x != nil {
		return x.FFixed32
	}
	return nil
}

func (x *TypeRepeated2) GetFFixed64() []uint64 {
	if x != nil {
		return x.FFixed64
	}
	return nil
}

func (x *TypeRepeated2) GetFFloat() []float32 {
	if x != nil {
		return x.FFloat
	}
	return nil
}

func (x *TypeRepeated2) GetFDouble() []float64 {
	if x != nil {
		return x.FDouble
	}
	return nil
}

func (x *TypeRepeated2) GetFBool1() []bool {
	if x != nil {
		return x.FBool1
	}
	return nil
}

func (x *TypeRepeated2) GetFBytes1() [][]byte {
	if x != nil {
		return x.FBytes1
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum1() []EnumRepeated1 {
	if x != nil {
		return x.FEnum1
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum2() []EnumRepeated1 {
	if x != nil {
		return x.FEnum2
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum3() []pbexternal.Month1 {
	if x != nil {
		return x.FEnum3
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum4() []pbexternal.Month2 {
	if x != nil {
		return x.FEnum4
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum5() []pbexternal.EnumWeek1_Week {
	if x != nil {
		return x.FEnum5
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum6() []pbexternal.EnumWeek2_Embed1_Week {
	if x != nil {
		return x.FEnum6
	}
	return nil
}

func (x *TypeRepeated2) GetFEnum7() []EnumCommon1 {
	if x != nil {
		return x.FEnum7
	}
	return nil
}

func (x *TypeRepeated2) GetFDuration1() []*durationpb.Duration {
	if x != nil {
		return x.FDuration1
	}
	return nil
}

func (x *TypeRepeated2) GetFTimestamp1() []*timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp1
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage1() []*MessageRepeated1 {
	if x != nil {
		return x.FMessage1
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage2() []*MessageRepeated1_Embed1 {
	if x != nil {
		return x.FMessage2
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage3() []*MessageRepeated1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage3
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage4() []*pbexternal.External1 {
	if x != nil {
		return x.FMessage4
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage5() []*pbexternal.External2_Embed1 {
	if x != nil {
		return x.FMessage5
	}
	return nil
}

func (x *TypeRepeated2) GetFMessage6() []*MessageCommon1 {
	if x != nil {
		return x.FMessage6
	}
	return nil
}

func (x *TypeRepeated2) GetFAny1() []*anypb.Any {
	if x != nil {
		return x.FAny1
	}
	return nil
}

type MessageRepeated1_Embed1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageRepeated1_Embed1) Reset() {
	*x = MessageRepeated1_Embed1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRepeated1_Embed1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRepeated1_Embed1) ProtoMessage() {}

func (x *MessageRepeated1_Embed1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRepeated1_Embed1.ProtoReflect.Descriptor instead.
func (*MessageRepeated1_Embed1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MessageRepeated1_Embed1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageRepeated1_Embed1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageRepeated1_Embed1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

type MessageRepeated1_Embed1_Embed2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
}

func (x *MessageRepeated1_Embed1_Embed2) Reset() {
	*x = MessageRepeated1_Embed1_Embed2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRepeated1_Embed1_Embed2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRepeated1_Embed1_Embed2) ProtoMessage() {}

func (x *MessageRepeated1_Embed1_Embed2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_types_type_repeated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRepeated1_Embed1_Embed2.ProtoReflect.Descriptor instead.
func (*MessageRepeated1_Embed1_Embed2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MessageRepeated1_Embed1_Embed2) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageRepeated1_Embed1_Embed2) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageRepeated1_Embed1_Embed2) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

var File_tests_proto_cases_types_type_repeated_proto protoreflect.FileDescriptor

var file_tests_proto_cases_types_type_repeated_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x12, 0x28, 0x0a, 0x09,
	0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x61, 0x52, 0x08, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a,
	0x05, 0x0a, 0x03, 0x7a, 0x01, 0x62, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x63,
	0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x1a, 0x8f, 0x02, 0x0a, 0x06, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05,
	0x0a, 0x03, 0x7a, 0x01, 0x78, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x79, 0x52,
	0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2,
	0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x7a, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x33, 0x1a, 0x86, 0x01, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x12, 0x28,
	0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x31, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e,
	0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a, 0x01, 0x32, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0xe2, 0x1e, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x7a,
	0x01, 0x33, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x22, 0xb1, 0x15, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x12, 0x70,
	0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x53, 0xfa, 0xe2, 0x1e, 0x4f, 0x12, 0x4d, 0x0a, 0x05, 0x7a, 0x03, 0x74, 0x73, 0x31,
	0x0a, 0x02, 0x7a, 0x00, 0x0a, 0x04, 0x7a, 0x02, 0x22, 0x22, 0x0a, 0x07, 0x7a, 0x05, 0x22, 0x74,
	0x73, 0x34, 0x22, 0x0a, 0x07, 0x7a, 0x05, 0x22, 0x74, 0x73, 0x35, 0x22, 0x0a, 0x08, 0x7a, 0x06,
	0x22, 0x74, 0x73, 0x22, 0x36, 0x22, 0x0a, 0x08, 0x7a, 0x06, 0x22, 0x74, 0x73, 0x22, 0x37, 0x22,
	0x0a, 0x07, 0x7a, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x0a, 0x07, 0x7a, 0x05, 0x7b, 0x74, 0x73,
	0x39, 0x7d, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x31, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x08, 0x0b, 0x0a, 0x02, 0x08,
	0x0c, 0x0a, 0x02, 0x08, 0x0d, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x06, 0x66, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x16, 0xfa, 0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a, 0x02, 0x10, 0x15,
	0x0a, 0x02, 0x10, 0x16, 0x0a, 0x02, 0x10, 0x17, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x06, 0x66, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02,
	0x38, 0x1f, 0x0a, 0x02, 0x38, 0x20, 0x0a, 0x02, 0x38, 0x21, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00,
	0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x42, 0x16, 0xfa, 0xe2, 0x1e,
	0x12, 0x12, 0x10, 0x0a, 0x02, 0x40, 0x29, 0x0a, 0x02, 0x40, 0x2a, 0x0a, 0x02, 0x40, 0x2b, 0x0a,
	0x00, 0x0a, 0x00, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x08,
	0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x11, 0x42, 0x18,
	0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x18, 0x66, 0x0a, 0x02, 0x18, 0x68, 0x0a, 0x02,
	0x18, 0x6a, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x12, 0x42, 0x16, 0xfa, 0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a, 0x02, 0x20, 0x7a, 0x0a,
	0x02, 0x20, 0x7c, 0x0a, 0x02, 0x20, 0x7e, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x07, 0x66, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x21, 0xfa, 0xe2, 0x1e, 0x1d, 0x12, 0x1b,
	0x0a, 0x05, 0x2d, 0x47, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x2d, 0x48, 0x00, 0x00, 0x00, 0x0a, 0x05,
	0x2d, 0x49, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x4a, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x12, 0x20, 0x03, 0x28, 0x10, 0x42, 0x2b, 0xfa, 0xe2, 0x1e, 0x27,
	0x12, 0x25, 0x0a, 0x09, 0x31, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x31,
	0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x31, 0x53, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x07, 0x42, 0x21, 0xfa, 0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a, 0x05, 0x4d,
	0x5b, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x4d, 0x5c, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x4d, 0x5d, 0x00,
	0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x48, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x06, 0x42, 0x2b, 0xfa, 0xe2, 0x1e, 0x27, 0x12, 0x25, 0x0a, 0x09, 0x51,
	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x51, 0x66, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0a, 0x09, 0x51, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
	0x0a, 0x00, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3a, 0x0a, 0x07,
	0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x42, 0x21, 0xfa,
	0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a, 0x05, 0x5d, 0xd5, 0x38, 0xde, 0x42, 0x0a, 0x05, 0x5d, 0x58,
	0x39, 0xe0, 0x42, 0x0a, 0x05, 0x5d, 0xdb, 0x39, 0xe2, 0x42, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00,
	0x52, 0x06, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x01, 0x42, 0x2b, 0xfa, 0xe2, 0x1e, 0x27,
	0x12, 0x25, 0x0a, 0x09, 0x61, 0x39, 0xb4, 0xc8, 0x76, 0xbe, 0x47, 0x5e, 0x40, 0x0a, 0x09, 0x61,
	0x2b, 0x87, 0x16, 0xd9, 0xce, 0x87, 0x5e, 0x40, 0x0a, 0x09, 0x61, 0x1d, 0x5a, 0x64, 0x3b, 0xdf,
	0xc7, 0x5e, 0x40, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x07, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x31, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x08, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x68, 0x01, 0x0a, 0x02, 0x68,
	0x00, 0x0a, 0x02, 0x68, 0x01, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x06, 0x66, 0x42, 0x6f,
	0x6f, 0x6c, 0x31, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x1f, 0xfa, 0xe2, 0x1e, 0x1b, 0x12, 0x19, 0x0a, 0x06, 0x82,
	0x01, 0x03, 0x61, 0x62, 0x63, 0x0a, 0x03, 0x82, 0x01, 0x00, 0x0a, 0x06, 0x82, 0x01, 0x03, 0x31,
	0x32, 0x33, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x07, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12,
	0x4f, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x42, 0x18,
	0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02, 0x70, 0x03, 0x0a, 0x02,
	0x70, 0x05, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x12, 0x4d, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x34, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x42,
	0x16, 0xfa, 0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a,
	0x02, 0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12,
	0x43, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x31, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02,
	0x70, 0x03, 0x0a, 0x02, 0x70, 0x05, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x06, 0x66, 0x45,
	0x6e, 0x75, 0x6d, 0x33, 0x12, 0x41, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x34, 0x18,
	0x36, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x42, 0x16, 0xfa, 0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a,
	0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02, 0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x52,
	0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x12, 0x4b, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x35, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x31, 0x2e, 0x57, 0x65,
	0x65, 0x6b, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02,
	0x70, 0x03, 0x0a, 0x02, 0x70, 0x05, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x06, 0x66, 0x45,
	0x6e, 0x75, 0x6d, 0x35, 0x12, 0x50, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x36, 0x18,
	0x38, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x16, 0xfa, 0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a, 0x02,
	0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02, 0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x06,
	0x66, 0x45, 0x6e, 0x75, 0x6d, 0x36, 0x12, 0x45, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x37, 0x18, 0x39, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x16, 0xfa,
	0xe2, 0x1e, 0x12, 0x12, 0x10, 0x0a, 0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02, 0x70,
	0x06, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x37, 0x12, 0x66, 0x0a,
	0x0b, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x3d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2a, 0xfa,
	0xe2, 0x1e, 0x26, 0x12, 0x24, 0x0a, 0x08, 0xb2, 0x01, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x0a,
	0x03, 0xb2, 0x01, 0x00, 0x0a, 0x08, 0xb2, 0x01, 0x05, 0x08, 0x66, 0x10, 0xca, 0x01, 0x0a, 0x03,
	0xb2, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x0a, 0x66, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x69, 0x0a, 0x0c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0xfa, 0xe2, 0x1e, 0x26, 0x12, 0x24, 0x0a,
	0x09, 0xba, 0x01, 0x06, 0x08, 0xc8, 0x01, 0x10, 0xac, 0x02, 0x0a, 0x03, 0xba, 0x01, 0x00, 0x0a,
	0x09, 0xba, 0x01, 0x06, 0x08, 0xca, 0x01, 0x10, 0xae, 0x02, 0x0a, 0x03, 0xba, 0x01, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31,
	0x12, 0x68, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x47,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x31, 0x42, 0x28, 0xfa, 0xe2, 0x1e, 0x24, 0x12, 0x22, 0x0a, 0x05, 0x8a,
	0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02,
	0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x58, 0x00, 0x52,
	0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x6d, 0x0a, 0x0a, 0x66, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x26, 0xfa, 0xe2, 0x1e, 0x22, 0x12, 0x20, 0x0a, 0x05,
	0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01,
	0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x58, 0x01, 0x52, 0x09,
	0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x74, 0x0a, 0x0a, 0x66, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x42, 0x26, 0xfa, 0xe2,
	0x1e, 0x22, 0x12, 0x20, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02,
	0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00,
	0x0a, 0x00, 0x10, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12,
	0x5a, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x18, 0x4a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x42, 0x26, 0xfa, 0xe2, 0x1e, 0x22, 0x12, 0x20,
	0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05,
	0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x58, 0x01,
	0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x12, 0x63, 0x0a, 0x0a, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x28, 0xfa, 0xe2, 0x1e,
	0x24, 0x12, 0x22, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08,
	0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a,
	0x00, 0x10, 0x00, 0x58, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35,
	0x12, 0x5e, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x36, 0x18, 0x4c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x26, 0xfa,
	0xe2, 0x1e, 0x22, 0x12, 0x20, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01,
	0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x36,
	0x12, 0x9d, 0x03, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x5b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0xef, 0x02, 0xfa, 0xe2, 0x1e, 0xea, 0x02, 0x12,
	0xe7, 0x02, 0x0a, 0x16, 0xaa, 0x01, 0x13, 0x5a, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x0a, 0x42, 0xaa, 0x01, 0x3f, 0x5a,
	0x3d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x0a, 0x24,
	0xaa, 0x01, 0x21, 0x5a, 0x1f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x32, 0x0a, 0x2a, 0xaa, 0x01, 0x27, 0x5a, 0x25, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31,
	0x0a, 0x31, 0xaa, 0x01, 0x2e, 0x5a, 0x2c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x31, 0x0a, 0x28, 0xaa, 0x01, 0x25, 0x5a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x0a, 0x1c, 0xaa,
	0x01, 0x19, 0x5a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x6e, 0x79, 0x0a, 0x33, 0xaa, 0x01, 0x30,
	0x5a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31,
	0x0a, 0x03, 0xaa, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x31,
	0x22, 0xd1, 0x15, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x32, 0x12, 0x72, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x55, 0xfa, 0xe2, 0x1e, 0x51, 0x12, 0x4f, 0x0a, 0x05, 0x7a,
	0x03, 0x74, 0x73, 0x31, 0x0a, 0x02, 0x7a, 0x00, 0x0a, 0x04, 0x7a, 0x02, 0x22, 0x22, 0x0a, 0x07,
	0x7a, 0x05, 0x22, 0x74, 0x73, 0x34, 0x22, 0x0a, 0x07, 0x7a, 0x05, 0x22, 0x74, 0x73, 0x35, 0x22,
	0x0a, 0x08, 0x7a, 0x06, 0x22, 0x74, 0x73, 0x22, 0x36, 0x22, 0x0a, 0x08, 0x7a, 0x06, 0x22, 0x74,
	0x73, 0x22, 0x37, 0x22, 0x0a, 0x07, 0x7a, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x0a, 0x07, 0x7a,
	0x05, 0x7b, 0x74, 0x73, 0x39, 0x7d, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x08, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a,
	0x02, 0x08, 0x0b, 0x0a, 0x02, 0x08, 0x0c, 0x0a, 0x02, 0x08, 0x0d, 0x0a, 0x00, 0x0a, 0x00, 0x10,
	0x01, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14,
	0x12, 0x12, 0x0a, 0x02, 0x10, 0x15, 0x0a, 0x02, 0x10, 0x16, 0x0a, 0x02, 0x10, 0x17, 0x0a, 0x00,
	0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x08,
	0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x18,
	0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x38, 0x1f, 0x0a, 0x02, 0x38, 0x20, 0x0a, 0x02,
	0x38, 0x21, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x40, 0x29, 0x0a,
	0x02, 0x40, 0x2a, 0x0a, 0x02, 0x40, 0x2b, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x07, 0x66,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x11, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12,
	0x0a, 0x02, 0x18, 0x66, 0x0a, 0x02, 0x18, 0x68, 0x0a, 0x02, 0x18, 0x6a, 0x0a, 0x00, 0x0a, 0x00,
	0x10, 0x01, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x08, 0x66,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x03, 0x28, 0x12, 0x42, 0x18, 0xfa,
	0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x20, 0x7a, 0x0a, 0x02, 0x20, 0x7c, 0x0a, 0x02, 0x20,
	0x7e, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x40, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x21, 0xfa, 0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a, 0x05, 0x2d, 0x47,
	0x00, 0x00, 0x00, 0x0a, 0x05, 0x2d, 0x48, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x2d, 0x49, 0x00, 0x00,
	0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x10, 0x42, 0x2d, 0xfa, 0xe2, 0x1e, 0x29, 0x12, 0x27, 0x0a, 0x09,
	0x31, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x31, 0x52, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x31, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x3e, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x07, 0x42, 0x21, 0xfa, 0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a, 0x05, 0x4d, 0x5b, 0x00,
	0x00, 0x00, 0x0a, 0x05, 0x4d, 0x5c, 0x00, 0x00, 0x00, 0x0a, 0x05, 0x4d, 0x5d, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x4a, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x06, 0x42, 0x2d, 0xfa, 0xe2, 0x1e, 0x29, 0x12, 0x27, 0x0a, 0x09, 0x51, 0x65, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x09, 0x51, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0a, 0x09, 0x51, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00,
	0x10, 0x01, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3a, 0x0a, 0x07,
	0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02, 0x42, 0x21, 0xfa,
	0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a, 0x05, 0x5d, 0xd5, 0x38, 0xde, 0x42, 0x0a, 0x05, 0x5d, 0x58,
	0x39, 0xe0, 0x42, 0x0a, 0x05, 0x5d, 0xdb, 0x39, 0xe2, 0x42, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01,
	0x52, 0x06, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x66, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x01, 0x42, 0x2d, 0xfa, 0xe2, 0x1e, 0x29,
	0x12, 0x27, 0x0a, 0x09, 0x61, 0x39, 0xb4, 0xc8, 0x76, 0xbe, 0x47, 0x5e, 0x40, 0x0a, 0x09, 0x61,
	0x2b, 0x87, 0x16, 0xd9, 0xce, 0x87, 0x5e, 0x40, 0x0a, 0x09, 0x61, 0x1d, 0x5a, 0x64, 0x3b, 0xdf,
	0xc7, 0x5e, 0x40, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x07, 0x66, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x08, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x68, 0x01, 0x0a,
	0x02, 0x68, 0x00, 0x0a, 0x02, 0x68, 0x01, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66,
	0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x31, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x21, 0xfa, 0xe2, 0x1e, 0x1d, 0x12, 0x1b, 0x0a,
	0x06, 0x82, 0x01, 0x03, 0x61, 0x62, 0x63, 0x0a, 0x03, 0x82, 0x01, 0x00, 0x0a, 0x06, 0x82, 0x01,
	0x03, 0x31, 0x32, 0x33, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x07, 0x66, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x33,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x31, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02,
	0x70, 0x03, 0x0a, 0x02, 0x70, 0x05, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x12, 0x4f, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18,
	0x34, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x31, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x02, 0x0a,
	0x02, 0x70, 0x04, 0x0a, 0x02, 0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33,
	0x18, 0x35, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12,
	0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02, 0x70, 0x03, 0x0a, 0x02, 0x70, 0x05, 0x0a, 0x00, 0x0a, 0x00,
	0x10, 0x01, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x12, 0x43, 0x0a, 0x07, 0x66, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x34, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x42, 0x18, 0xfa,
	0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02, 0x70,
	0x06, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x12,
	0x4b, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x35, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x57, 0x65, 0x65, 0x6b, 0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14,
	0x12, 0x12, 0x0a, 0x02, 0x70, 0x01, 0x0a, 0x02, 0x70, 0x03, 0x0a, 0x02, 0x70, 0x05, 0x0a, 0x00,
	0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x35, 0x12, 0x52, 0x0a, 0x07,
	0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x36, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65,
	0x6b, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x18,
	0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a, 0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02,
	0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x36,
	0x12, 0x47, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x37, 0x18, 0x39, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x18, 0xfa, 0xe2, 0x1e, 0x14, 0x12, 0x12, 0x0a,
	0x02, 0x70, 0x02, 0x0a, 0x02, 0x70, 0x04, 0x0a, 0x02, 0x70, 0x06, 0x0a, 0x00, 0x0a, 0x00, 0x10,
	0x01, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x37, 0x12, 0x66, 0x0a, 0x0b, 0x66, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2a, 0xfa, 0xe2, 0x1e, 0x26, 0x12,
	0x24, 0x0a, 0x08, 0xb2, 0x01, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x0a, 0x03, 0xb2, 0x01, 0x00,
	0x0a, 0x08, 0xb2, 0x01, 0x05, 0x08, 0x66, 0x10, 0xca, 0x01, 0x0a, 0x03, 0xb2, 0x01, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x0a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x12, 0x6b, 0x0a, 0x0c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x31, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x2c, 0xfa, 0xe2, 0x1e, 0x28, 0x12, 0x26, 0x0a, 0x09, 0xba, 0x01, 0x06,
	0x08, 0xc8, 0x01, 0x10, 0xac, 0x02, 0x0a, 0x03, 0xba, 0x01, 0x00, 0x0a, 0x09, 0xba, 0x01, 0x06,
	0x08, 0xca, 0x01, 0x10, 0xae, 0x02, 0x0a, 0x03, 0xba, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10,
	0x01, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x68,
	0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x47, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x31, 0x42, 0x28, 0xfa, 0xe2, 0x1e, 0x24, 0x12, 0x22, 0x0a, 0x05, 0x8a, 0x01, 0x02,
	0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01,
	0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x58, 0x00, 0x52, 0x09, 0x66,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x6f, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x31, 0x42, 0x28, 0xfa, 0xe2, 0x1e, 0x24, 0x12, 0x22, 0x0a, 0x05, 0x8a, 0x01,
	0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08,
	0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x58, 0x01, 0x52, 0x09,
	0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x74, 0x0a, 0x0a, 0x66, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x42, 0x26, 0xfa, 0xe2,
	0x1e, 0x22, 0x12, 0x20, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02,
	0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00,
	0x0a, 0x00, 0x10, 0x01, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12,
	0x5c, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x18, 0x4a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x42, 0x28, 0xfa, 0xe2, 0x1e, 0x24, 0x12, 0x22,
	0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x00, 0x0a, 0x05,
	0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01,
	0x58, 0x01, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x34, 0x12, 0x61, 0x0a,
	0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35, 0x18, 0x4b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x26, 0xfa,
	0xe2, 0x1e, 0x22, 0x12, 0x20, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01,
	0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x35,
	0x12, 0x60, 0x0a, 0x0a, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x36, 0x18, 0x4c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x28, 0xfa,
	0xe2, 0x1e, 0x24, 0x12, 0x22, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x05, 0x8a, 0x01,
	0x02, 0x08, 0x00, 0x0a, 0x05, 0x8a, 0x01, 0x02, 0x08, 0x01, 0x0a, 0x03, 0x8a, 0x01, 0x00, 0x0a,
	0x00, 0x0a, 0x00, 0x10, 0x01, 0x58, 0x00, 0x52, 0x09, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x36, 0x12, 0x9f, 0x03, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x5b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0xf1, 0x02, 0xfa, 0xe2, 0x1e, 0xec,
	0x02, 0x12, 0xe9, 0x02, 0x0a, 0x16, 0xaa, 0x01, 0x13, 0x5a, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x0a, 0x42, 0xaa, 0x01,
	0x3f, 0x5a, 0x3d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31,
	0x0a, 0x24, 0xaa, 0x01, 0x21, 0x5a, 0x1f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x0a, 0x2a, 0xaa, 0x01, 0x27, 0x5a, 0x25, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x31, 0x0a, 0x31, 0xaa, 0x01, 0x2e, 0x5a, 0x2c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x31, 0x0a, 0x28, 0xaa, 0x01, 0x25, 0x5a, 0x23, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x0a,
	0x1c, 0xaa, 0x01, 0x19, 0x5a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x6e, 0x79, 0x0a, 0x33, 0xaa,
	0x01, 0x30, 0x5a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x31, 0x0a, 0x03, 0xaa, 0x01, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x10, 0x01, 0x52, 0x05, 0x66,
	0x41, 0x6e, 0x79, 0x31, 0x2a, 0x7c, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x6f, 0x75, 0x72, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10, 0x07,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x65, 0x76,
	0x65, 0x6e, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67, 0x68, 0x74, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x65, 0x6e,
	0x10, 0x11, 0x42, 0x16, 0x5a, 0x14, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x70, 0x62, 0x2f, 0x70, 0x62, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tests_proto_cases_types_type_repeated_proto_rawDescOnce sync.Once
	file_tests_proto_cases_types_type_repeated_proto_rawDescData = file_tests_proto_cases_types_type_repeated_proto_rawDesc
)

func file_tests_proto_cases_types_type_repeated_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_types_type_repeated_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_types_type_repeated_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_types_type_repeated_proto_rawDescData)
	})
	return file_tests_proto_cases_types_type_repeated_proto_rawDescData
}

var file_tests_proto_cases_types_type_repeated_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tests_proto_cases_types_type_repeated_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tests_proto_cases_types_type_repeated_proto_goTypes = []interface{}{
	(EnumRepeated1)(0),                     // 0: type_repeated.EnumRepeated1
	(*MessageRepeated1)(nil),               // 1: type_repeated.MessageRepeated1
	(*TypeRepeated1)(nil),                  // 2: type_repeated.TypeRepeated1
	(*TypeRepeated2)(nil),                  // 3: type_repeated.TypeRepeated2
	(*MessageRepeated1_Embed1)(nil),        // 4: type_repeated.MessageRepeated1.Embed1
	(*MessageRepeated1_Embed1_Embed2)(nil), // 5: type_repeated.MessageRepeated1.Embed1.Embed2
	(pbexternal.Month1)(0),                 // 6: external.Month1
	(pbexternal.Month2)(0),                 // 7: external.Month2
	(pbexternal.EnumWeek1_Week)(0),         // 8: external.EnumWeek1.Week
	(pbexternal.EnumWeek2_Embed1_Week)(0),  // 9: external.EnumWeek2.Embed1.Week
	(EnumCommon1)(0),                       // 10: private.EnumCommon1
	(*durationpb.Duration)(nil),            // 11: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),          // 12: google.protobuf.Timestamp
	(*pbexternal.External1)(nil),           // 13: external.External1
	(*pbexternal.External2_Embed1)(nil),    // 14: external.External2.Embed1
	(*MessageCommon1)(nil),                 // 15: private.MessageCommon1
	(*anypb.Any)(nil),                      // 16: google.protobuf.Any
}
var file_tests_proto_cases_types_type_repeated_proto_depIdxs = []int32{
	0,  // 0: type_repeated.TypeRepeated1.f_enum1:type_name -> type_repeated.EnumRepeated1
	0,  // 1: type_repeated.TypeRepeated1.f_enum2:type_name -> type_repeated.EnumRepeated1
	6,  // 2: type_repeated.TypeRepeated1.f_enum3:type_name -> external.Month1
	7,  // 3: type_repeated.TypeRepeated1.f_enum4:type_name -> external.Month2
	8,  // 4: type_repeated.TypeRepeated1.f_enum5:type_name -> external.EnumWeek1.Week
	9,  // 5: type_repeated.TypeRepeated1.f_enum6:type_name -> external.EnumWeek2.Embed1.Week
	10, // 6: type_repeated.TypeRepeated1.f_enum7:type_name -> private.EnumCommon1
	11, // 7: type_repeated.TypeRepeated1.f_duration1:type_name -> google.protobuf.Duration
	12, // 8: type_repeated.TypeRepeated1.f_timestamp1:type_name -> google.protobuf.Timestamp
	1,  // 9: type_repeated.TypeRepeated1.f_message1:type_name -> type_repeated.MessageRepeated1
	4,  // 10: type_repeated.TypeRepeated1.f_message2:type_name -> type_repeated.MessageRepeated1.Embed1
	5,  // 11: type_repeated.TypeRepeated1.f_message3:type_name -> type_repeated.MessageRepeated1.Embed1.Embed2
	13, // 12: type_repeated.TypeRepeated1.f_message4:type_name -> external.External1
	14, // 13: type_repeated.TypeRepeated1.f_message5:type_name -> external.External2.Embed1
	15, // 14: type_repeated.TypeRepeated1.f_message6:type_name -> private.MessageCommon1
	16, // 15: type_repeated.TypeRepeated1.f_any1:type_name -> google.protobuf.Any
	0,  // 16: type_repeated.TypeRepeated2.f_enum1:type_name -> type_repeated.EnumRepeated1
	0,  // 17: type_repeated.TypeRepeated2.f_enum2:type_name -> type_repeated.EnumRepeated1
	6,  // 18: type_repeated.TypeRepeated2.f_enum3:type_name -> external.Month1
	7,  // 19: type_repeated.TypeRepeated2.f_enum4:type_name -> external.Month2
	8,  // 20: type_repeated.TypeRepeated2.f_enum5:type_name -> external.EnumWeek1.Week
	9,  // 21: type_repeated.TypeRepeated2.f_enum6:type_name -> external.EnumWeek2.Embed1.Week
	10, // 22: type_repeated.TypeRepeated2.f_enum7:type_name -> private.EnumCommon1
	11, // 23: type_repeated.TypeRepeated2.f_duration1:type_name -> google.protobuf.Duration
	12, // 24: type_repeated.TypeRepeated2.f_timestamp1:type_name -> google.protobuf.Timestamp
	1,  // 25: type_repeated.TypeRepeated2.f_message1:type_name -> type_repeated.MessageRepeated1
	4,  // 26: type_repeated.TypeRepeated2.f_message2:type_name -> type_repeated.MessageRepeated1.Embed1
	5,  // 27: type_repeated.TypeRepeated2.f_message3:type_name -> type_repeated.MessageRepeated1.Embed1.Embed2
	13, // 28: type_repeated.TypeRepeated2.f_message4:type_name -> external.External1
	14, // 29: type_repeated.TypeRepeated2.f_message5:type_name -> external.External2.Embed1
	15, // 30: type_repeated.TypeRepeated2.f_message6:type_name -> private.MessageCommon1
	16, // 31: type_repeated.TypeRepeated2.f_any1:type_name -> google.protobuf.Any
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_types_type_repeated_proto_init() }
func file_tests_proto_cases_types_type_repeated_proto_init() {
	if File_tests_proto_cases_types_type_repeated_proto != nil {
		return
	}
	file_tests_proto_cases_types_private_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_types_type_repeated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRepeated1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_repeated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRepeated1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_repeated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeRepeated2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_repeated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRepeated1_Embed1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_types_type_repeated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRepeated1_Embed1_Embed2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_types_type_repeated_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_types_type_repeated_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_types_type_repeated_proto_depIdxs,
		EnumInfos:         file_tests_proto_cases_types_type_repeated_proto_enumTypes,
		MessageInfos:      file_tests_proto_cases_types_type_repeated_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_types_type_repeated_proto = out.File
	file_tests_proto_cases_types_type_repeated_proto_rawDesc = nil
	file_tests_proto_cases_types_type_repeated_proto_goTypes = nil
	file_tests_proto_cases_types_type_repeated_proto_depIdxs = nil
}
