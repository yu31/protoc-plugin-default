// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/module/external.proto

package pbexternal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Month1 int32

const (
	Month1_Month1Unset Month1 = 0
	Month1_January     Month1 = 1
	Month1_February    Month1 = 3
	Month1_March       Month1 = 6
	Month1_April       Month1 = 9
	Month1_May         Month1 = 12
	Month1_June        Month1 = 15
)

// Enum value maps for Month1.
var (
	Month1_name = map[int32]string{
		0:  "Month1Unset",
		1:  "January",
		3:  "February",
		6:  "March",
		9:  "April",
		12: "May",
		15: "June",
	}
	Month1_value = map[string]int32{
		"Month1Unset": 0,
		"January":     1,
		"February":    3,
		"March":       6,
		"April":       9,
		"May":         12,
		"June":        15,
	}
)

func (x Month1) Enum() *Month1 {
	p := new(Month1)
	*p = x
	return p
}

func (x Month1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Month1) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_module_external_proto_enumTypes[0].Descriptor()
}

func (Month1) Type() protoreflect.EnumType {
	return &file_tests_proto_module_external_proto_enumTypes[0]
}

func (x Month1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Month1.Descriptor instead.
func (Month1) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{0}
}

type Month2 int32

const (
	Month2_Month2Unset Month2 = 0
	Month2_July        Month2 = 1
	Month2_August      Month2 = 3
	Month2_September   Month2 = 6
	Month2_October     Month2 = 9
	Month2_November    Month2 = 12
	Month2_December    Month2 = 15
)

// Enum value maps for Month2.
var (
	Month2_name = map[int32]string{
		0:  "Month2Unset",
		1:  "July",
		3:  "August",
		6:  "September",
		9:  "October",
		12: "November",
		15: "December",
	}
	Month2_value = map[string]int32{
		"Month2Unset": 0,
		"July":        1,
		"August":      3,
		"September":   6,
		"October":     9,
		"November":    12,
		"December":    15,
	}
)

func (x Month2) Enum() *Month2 {
	p := new(Month2)
	*p = x
	return p
}

func (x Month2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Month2) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_module_external_proto_enumTypes[1].Descriptor()
}

func (Month2) Type() protoreflect.EnumType {
	return &file_tests_proto_module_external_proto_enumTypes[1]
}

func (x Month2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Month2.Descriptor instead.
func (Month2) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{1}
}

type EnumWeek1_Week int32

const (
	EnumWeek1_WeekUnset EnumWeek1_Week = 0
	EnumWeek1_Monday    EnumWeek1_Week = 1
	EnumWeek1_Tuesday   EnumWeek1_Week = 3
	EnumWeek1_Wednesday EnumWeek1_Week = 6
	EnumWeek1_Thursday  EnumWeek1_Week = 9
	EnumWeek1_Friday    EnumWeek1_Week = 12
	EnumWeek1_Saturday  EnumWeek1_Week = 15
	EnumWeek1_Sunday    EnumWeek1_Week = 18
)

// Enum value maps for EnumWeek1_Week.
var (
	EnumWeek1_Week_name = map[int32]string{
		0:  "WeekUnset",
		1:  "Monday",
		3:  "Tuesday",
		6:  "Wednesday",
		9:  "Thursday",
		12: "Friday",
		15: "Saturday",
		18: "Sunday",
	}
	EnumWeek1_Week_value = map[string]int32{
		"WeekUnset": 0,
		"Monday":    1,
		"Tuesday":   3,
		"Wednesday": 6,
		"Thursday":  9,
		"Friday":    12,
		"Saturday":  15,
		"Sunday":    18,
	}
)

func (x EnumWeek1_Week) Enum() *EnumWeek1_Week {
	p := new(EnumWeek1_Week)
	*p = x
	return p
}

func (x EnumWeek1_Week) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumWeek1_Week) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_module_external_proto_enumTypes[2].Descriptor()
}

func (EnumWeek1_Week) Type() protoreflect.EnumType {
	return &file_tests_proto_module_external_proto_enumTypes[2]
}

func (x EnumWeek1_Week) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumWeek1_Week.Descriptor instead.
func (EnumWeek1_Week) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{0, 0}
}

type EnumWeek2_Embed1_Week int32

const (
	EnumWeek2_Embed1_WeekUnset EnumWeek2_Embed1_Week = 0
	EnumWeek2_Embed1_Monday    EnumWeek2_Embed1_Week = 1
	EnumWeek2_Embed1_Tuesday   EnumWeek2_Embed1_Week = 3
	EnumWeek2_Embed1_Wednesday EnumWeek2_Embed1_Week = 6
	EnumWeek2_Embed1_Thursday  EnumWeek2_Embed1_Week = 9
	EnumWeek2_Embed1_Friday    EnumWeek2_Embed1_Week = 12
	EnumWeek2_Embed1_Saturday  EnumWeek2_Embed1_Week = 15
	EnumWeek2_Embed1_Sunday    EnumWeek2_Embed1_Week = 18
)

// Enum value maps for EnumWeek2_Embed1_Week.
var (
	EnumWeek2_Embed1_Week_name = map[int32]string{
		0:  "WeekUnset",
		1:  "Monday",
		3:  "Tuesday",
		6:  "Wednesday",
		9:  "Thursday",
		12: "Friday",
		15: "Saturday",
		18: "Sunday",
	}
	EnumWeek2_Embed1_Week_value = map[string]int32{
		"WeekUnset": 0,
		"Monday":    1,
		"Tuesday":   3,
		"Wednesday": 6,
		"Thursday":  9,
		"Friday":    12,
		"Saturday":  15,
		"Sunday":    18,
	}
)

func (x EnumWeek2_Embed1_Week) Enum() *EnumWeek2_Embed1_Week {
	p := new(EnumWeek2_Embed1_Week)
	*p = x
	return p
}

func (x EnumWeek2_Embed1_Week) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumWeek2_Embed1_Week) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_module_external_proto_enumTypes[3].Descriptor()
}

func (EnumWeek2_Embed1_Week) Type() protoreflect.EnumType {
	return &file_tests_proto_module_external_proto_enumTypes[3]
}

func (x EnumWeek2_Embed1_Week) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumWeek2_Embed1_Week.Descriptor instead.
func (EnumWeek2_Embed1_Week) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{1, 0, 0}
}

type EnumWeek1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnumWeek1) Reset() {
	*x = EnumWeek1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumWeek1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumWeek1) ProtoMessage() {}

func (x *EnumWeek1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumWeek1.ProtoReflect.Descriptor instead.
func (*EnumWeek1) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{0}
}

type EnumWeek2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnumWeek2) Reset() {
	*x = EnumWeek2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumWeek2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumWeek2) ProtoMessage() {}

func (x *EnumWeek2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumWeek2.ProtoReflect.Descriptor instead.
func (*EnumWeek2) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{1}
}

type External1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TFloat     float32                `protobuf:"fixed32,19,opt,name=t_float,json=tFloat,proto3" json:"t_float,omitempty"`
	TDouble    float64                `protobuf:"fixed64,20,opt,name=t_double,json=tDouble,proto3" json:"t_double,omitempty"`
	TInt32     int32                  `protobuf:"varint,1,opt,name=t_int32,json=tInt32,proto3" json:"t_int32,omitempty"`
	TSint32    int32                  `protobuf:"zigzag32,2,opt,name=t_sint32,json=tSint32,proto3" json:"t_sint32,omitempty"`
	TSfixed32  int32                  `protobuf:"fixed32,3,opt,name=t_sfixed32,json=tSfixed32,proto3" json:"t_sfixed32,omitempty"`
	TInt64     int64                  `protobuf:"varint,4,opt,name=t_int64,json=tInt64,proto3" json:"t_int64,omitempty"`
	TSint64    int64                  `protobuf:"zigzag64,5,opt,name=t_sint64,json=tSint64,proto3" json:"t_sint64,omitempty"`
	TSfixed64  int64                  `protobuf:"fixed64,6,opt,name=t_sfixed64,json=tSfixed64,proto3" json:"t_sfixed64,omitempty"`
	TUint32    uint32                 `protobuf:"varint,7,opt,name=t_uint32,json=tUint32,proto3" json:"t_uint32,omitempty"`
	TUint64    uint64                 `protobuf:"varint,8,opt,name=t_uint64,json=tUint64,proto3" json:"t_uint64,omitempty"`
	TFixed32   uint32                 `protobuf:"fixed32,9,opt,name=t_fixed32,json=tFixed32,proto3" json:"t_fixed32,omitempty"`
	TFixed64   uint64                 `protobuf:"fixed64,10,opt,name=t_fixed64,json=tFixed64,proto3" json:"t_fixed64,omitempty"`
	TBool      bool                   `protobuf:"varint,11,opt,name=t_bool,json=tBool,proto3" json:"t_bool,omitempty"`
	TString    string                 `protobuf:"bytes,12,opt,name=t_string,json=tString,proto3" json:"t_string,omitempty"`
	TBytes     []byte                 `protobuf:"bytes,13,opt,name=t_bytes,json=tBytes,proto3" json:"t_bytes,omitempty"`
	TEnum1     Month1                 `protobuf:"varint,14,opt,name=t_enum1,json=tEnum1,proto3,enum=external.Month1" json:"t_enum1,omitempty"`
	TEnum2     Month2                 `protobuf:"varint,15,opt,name=t_enum2,json=tEnum2,proto3,enum=external.Month2" json:"t_enum2,omitempty"`
	TAny       *anypb.Any             `protobuf:"bytes,16,opt,name=t_any,json=tAny,proto3" json:"t_any,omitempty"`
	TTimestamp *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=t_timestamp,json=tTimestamp,proto3" json:"t_timestamp,omitempty"`
	TDuration  *durationpb.Duration   `protobuf:"bytes,18,opt,name=t_duration,json=tDuration,proto3" json:"t_duration,omitempty"`
	PFloat     *float32               `protobuf:"fixed32,119,opt,name=p_float,json=pFloat,proto3,oneof" json:"p_float,omitempty"`
	PDouble    *float64               `protobuf:"fixed64,120,opt,name=p_double,json=pDouble,proto3,oneof" json:"p_double,omitempty"`
	PInt32     *int32                 `protobuf:"varint,101,opt,name=p_int32,json=pInt32,proto3,oneof" json:"p_int32,omitempty"`
	PSint32    *int32                 `protobuf:"zigzag32,102,opt,name=p_sint32,json=pSint32,proto3,oneof" json:"p_sint32,omitempty"`
	PSfixed32  *int32                 `protobuf:"fixed32,103,opt,name=p_sfixed32,json=pSfixed32,proto3,oneof" json:"p_sfixed32,omitempty"`
	PInt64     *int64                 `protobuf:"varint,104,opt,name=p_int64,json=pInt64,proto3,oneof" json:"p_int64,omitempty"`
	PSint64    *int64                 `protobuf:"zigzag64,105,opt,name=p_sint64,json=pSint64,proto3,oneof" json:"p_sint64,omitempty"`
	PSfixed64  *int64                 `protobuf:"fixed64,106,opt,name=p_sfixed64,json=pSfixed64,proto3,oneof" json:"p_sfixed64,omitempty"`
	PUint32    *uint32                `protobuf:"varint,107,opt,name=p_uint32,json=pUint32,proto3,oneof" json:"p_uint32,omitempty"`
	PUint64    *uint64                `protobuf:"varint,108,opt,name=p_uint64,json=pUint64,proto3,oneof" json:"p_uint64,omitempty"`
	PFixed32   *uint32                `protobuf:"fixed32,109,opt,name=p_fixed32,json=pFixed32,proto3,oneof" json:"p_fixed32,omitempty"`
	PFixed64   *uint64                `protobuf:"fixed64,110,opt,name=p_fixed64,json=pFixed64,proto3,oneof" json:"p_fixed64,omitempty"`
	PBool      *bool                  `protobuf:"varint,111,opt,name=p_bool,json=pBool,proto3,oneof" json:"p_bool,omitempty"`
	PString    *string                `protobuf:"bytes,112,opt,name=p_string,json=pString,proto3,oneof" json:"p_string,omitempty"`
	PBytes     []byte                 `protobuf:"bytes,113,opt,name=p_bytes,json=pBytes,proto3,oneof" json:"p_bytes,omitempty"`
	PEnum1     *Month1                `protobuf:"varint,114,opt,name=p_enum1,json=pEnum1,proto3,enum=external.Month1,oneof" json:"p_enum1,omitempty"`
	PEnum2     *Month2                `protobuf:"varint,115,opt,name=p_enum2,json=pEnum2,proto3,enum=external.Month2,oneof" json:"p_enum2,omitempty"`
	PAny       *anypb.Any             `protobuf:"bytes,116,opt,name=p_any,json=pAny,proto3,oneof" json:"p_any,omitempty"`
	PTimestamp *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=p_timestamp,json=pTimestamp,proto3,oneof" json:"p_timestamp,omitempty"`
	PDuration  *durationpb.Duration   `protobuf:"bytes,118,opt,name=p_duration,json=pDuration,proto3,oneof" json:"p_duration,omitempty"`
	// Types that are assignable to OneOfType1:
	//	*External1_OFloat
	//	*External1_ODouble
	//	*External1_OInt32
	//	*External1_OSint32
	//	*External1_OSfixed32
	//	*External1_OInt64
	//	*External1_OSint64
	//	*External1_OSfixed64
	//	*External1_OUint32
	//	*External1_OUint64
	//	*External1_OFixed32
	//	*External1_OFixed64
	//	*External1_OBool
	//	*External1_OString
	//	*External1_OBytes
	//	*External1_OEnum1
	//	*External1_OEnum2
	//	*External1_OAny
	//	*External1_OTimestamp
	//	*External1_ODuration
	OneOfType1 isExternal1_OneOfType1            `protobuf_oneof:"OneOfType1"`
	RFloat     []float32                         `protobuf:"fixed32,319,rep,packed,name=r_float,json=rFloat,proto3" json:"r_float,omitempty"`
	RDouble    []float64                         `protobuf:"fixed64,320,rep,packed,name=r_double,json=rDouble,proto3" json:"r_double,omitempty"`
	RInt32     []int32                           `protobuf:"varint,301,rep,packed,name=r_int32,json=rInt32,proto3" json:"r_int32,omitempty"`
	RSint32    []int32                           `protobuf:"zigzag32,302,rep,packed,name=r_sint32,json=rSint32,proto3" json:"r_sint32,omitempty"`
	RSfixed32  []int32                           `protobuf:"fixed32,303,rep,packed,name=r_sfixed32,json=rSfixed32,proto3" json:"r_sfixed32,omitempty"`
	RInt64     []int64                           `protobuf:"varint,304,rep,packed,name=r_int64,json=rInt64,proto3" json:"r_int64,omitempty"`
	RSint64    []int64                           `protobuf:"zigzag64,305,rep,packed,name=r_sint64,json=rSint64,proto3" json:"r_sint64,omitempty"`
	RSfixed64  []int64                           `protobuf:"fixed64,306,rep,packed,name=r_sfixed64,json=rSfixed64,proto3" json:"r_sfixed64,omitempty"`
	RUint32    []uint32                          `protobuf:"varint,307,rep,packed,name=r_uint32,json=rUint32,proto3" json:"r_uint32,omitempty"`
	RUint64    []uint64                          `protobuf:"varint,308,rep,packed,name=r_uint64,json=rUint64,proto3" json:"r_uint64,omitempty"`
	RFixed32   []uint32                          `protobuf:"fixed32,309,rep,packed,name=r_fixed32,json=rFixed32,proto3" json:"r_fixed32,omitempty"`
	RFixed64   []uint64                          `protobuf:"fixed64,310,rep,packed,name=r_fixed64,json=rFixed64,proto3" json:"r_fixed64,omitempty"`
	RBool      []bool                            `protobuf:"varint,311,rep,packed,name=r_bool,json=rBool,proto3" json:"r_bool,omitempty"`
	RString    []string                          `protobuf:"bytes,312,rep,name=r_string,json=rString,proto3" json:"r_string,omitempty"`
	RBytes     [][]byte                          `protobuf:"bytes,313,rep,name=r_bytes,json=rBytes,proto3" json:"r_bytes,omitempty"`
	REnum1     []Month1                          `protobuf:"varint,314,rep,packed,name=r_enum1,json=rEnum1,proto3,enum=external.Month1" json:"r_enum1,omitempty"`
	REnum2     []Month2                          `protobuf:"varint,315,rep,packed,name=r_enum2,json=rEnum2,proto3,enum=external.Month2" json:"r_enum2,omitempty"`
	RAny       []*anypb.Any                      `protobuf:"bytes,316,rep,name=r_any,json=rAny,proto3" json:"r_any,omitempty"`
	RTimestamp []*timestamppb.Timestamp          `protobuf:"bytes,317,rep,name=r_timestamp,json=rTimestamp,proto3" json:"r_timestamp,omitempty"`
	RDuration  []*durationpb.Duration            `protobuf:"bytes,318,rep,name=r_duration,json=rDuration,proto3" json:"r_duration,omitempty"`
	MFloat     map[string]float32                `protobuf:"bytes,419,rep,name=m_float,json=mFloat,proto3" json:"m_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MDouble    map[string]float64                `protobuf:"bytes,420,rep,name=m_double,json=mDouble,proto3" json:"m_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MInt32     map[string]int32                  `protobuf:"bytes,401,rep,name=m_int32,json=mInt32,proto3" json:"m_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MSint32    map[string]int32                  `protobuf:"bytes,402,rep,name=m_sint32,json=mSint32,proto3" json:"m_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MSfixed32  map[string]int32                  `protobuf:"bytes,403,rep,name=m_sfixed32,json=mSfixed32,proto3" json:"m_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MInt64     map[string]int64                  `protobuf:"bytes,404,rep,name=m_int64,json=mInt64,proto3" json:"m_int64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MSint64    map[string]int64                  `protobuf:"bytes,405,rep,name=m_sint64,json=mSint64,proto3" json:"m_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MSfixed64  map[string]int64                  `protobuf:"bytes,406,rep,name=m_sfixed64,json=mSfixed64,proto3" json:"m_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MUint32    map[string]uint32                 `protobuf:"bytes,407,rep,name=m_uint32,json=mUint32,proto3" json:"m_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MUint64    map[string]uint64                 `protobuf:"bytes,408,rep,name=m_uint64,json=mUint64,proto3" json:"m_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MFixed32   map[string]uint32                 `protobuf:"bytes,409,rep,name=m_fixed32,json=mFixed32,proto3" json:"m_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MFixed64   map[string]uint64                 `protobuf:"bytes,410,rep,name=m_fixed64,json=mFixed64,proto3" json:"m_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MBool      map[string]bool                   `protobuf:"bytes,411,rep,name=m_bool,json=mBool,proto3" json:"m_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MString    map[string]string                 `protobuf:"bytes,412,rep,name=m_string,json=mString,proto3" json:"m_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MBytes     map[string][]byte                 `protobuf:"bytes,413,rep,name=m_bytes,json=mBytes,proto3" json:"m_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MEnum1     map[string]Month1                 `protobuf:"bytes,414,rep,name=m_enum1,json=mEnum1,proto3" json:"m_enum1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=external.Month1"`
	MEnum2     map[string]Month2                 `protobuf:"bytes,415,rep,name=m_enum2,json=mEnum2,proto3" json:"m_enum2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=external.Month2"`
	MAny       map[string]*anypb.Any             `protobuf:"bytes,416,rep,name=m_any,json=mAny,proto3" json:"m_any,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MTimestamp map[string]*timestamppb.Timestamp `protobuf:"bytes,417,rep,name=m_timestamp,json=mTimestamp,proto3" json:"m_timestamp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MDuration  map[string]*durationpb.Duration   `protobuf:"bytes,418,rep,name=m_duration,json=mDuration,proto3" json:"m_duration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *External1) Reset() {
	*x = External1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External1) ProtoMessage() {}

func (x *External1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External1.ProtoReflect.Descriptor instead.
func (*External1) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{2}
}

func (x *External1) GetTFloat() float32 {
	if x != nil {
		return x.TFloat
	}
	return 0
}

func (x *External1) GetTDouble() float64 {
	if x != nil {
		return x.TDouble
	}
	return 0
}

func (x *External1) GetTInt32() int32 {
	if x != nil {
		return x.TInt32
	}
	return 0
}

func (x *External1) GetTSint32() int32 {
	if x != nil {
		return x.TSint32
	}
	return 0
}

func (x *External1) GetTSfixed32() int32 {
	if x != nil {
		return x.TSfixed32
	}
	return 0
}

func (x *External1) GetTInt64() int64 {
	if x != nil {
		return x.TInt64
	}
	return 0
}

func (x *External1) GetTSint64() int64 {
	if x != nil {
		return x.TSint64
	}
	return 0
}

func (x *External1) GetTSfixed64() int64 {
	if x != nil {
		return x.TSfixed64
	}
	return 0
}

func (x *External1) GetTUint32() uint32 {
	if x != nil {
		return x.TUint32
	}
	return 0
}

func (x *External1) GetTUint64() uint64 {
	if x != nil {
		return x.TUint64
	}
	return 0
}

func (x *External1) GetTFixed32() uint32 {
	if x != nil {
		return x.TFixed32
	}
	return 0
}

func (x *External1) GetTFixed64() uint64 {
	if x != nil {
		return x.TFixed64
	}
	return 0
}

func (x *External1) GetTBool() bool {
	if x != nil {
		return x.TBool
	}
	return false
}

func (x *External1) GetTString() string {
	if x != nil {
		return x.TString
	}
	return ""
}

func (x *External1) GetTBytes() []byte {
	if x != nil {
		return x.TBytes
	}
	return nil
}

func (x *External1) GetTEnum1() Month1 {
	if x != nil {
		return x.TEnum1
	}
	return Month1_Month1Unset
}

func (x *External1) GetTEnum2() Month2 {
	if x != nil {
		return x.TEnum2
	}
	return Month2_Month2Unset
}

func (x *External1) GetTAny() *anypb.Any {
	if x != nil {
		return x.TAny
	}
	return nil
}

func (x *External1) GetTTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TTimestamp
	}
	return nil
}

func (x *External1) GetTDuration() *durationpb.Duration {
	if x != nil {
		return x.TDuration
	}
	return nil
}

func (x *External1) GetPFloat() float32 {
	if x != nil && x.PFloat != nil {
		return *x.PFloat
	}
	return 0
}

func (x *External1) GetPDouble() float64 {
	if x != nil && x.PDouble != nil {
		return *x.PDouble
	}
	return 0
}

func (x *External1) GetPInt32() int32 {
	if x != nil && x.PInt32 != nil {
		return *x.PInt32
	}
	return 0
}

func (x *External1) GetPSint32() int32 {
	if x != nil && x.PSint32 != nil {
		return *x.PSint32
	}
	return 0
}

func (x *External1) GetPSfixed32() int32 {
	if x != nil && x.PSfixed32 != nil {
		return *x.PSfixed32
	}
	return 0
}

func (x *External1) GetPInt64() int64 {
	if x != nil && x.PInt64 != nil {
		return *x.PInt64
	}
	return 0
}

func (x *External1) GetPSint64() int64 {
	if x != nil && x.PSint64 != nil {
		return *x.PSint64
	}
	return 0
}

func (x *External1) GetPSfixed64() int64 {
	if x != nil && x.PSfixed64 != nil {
		return *x.PSfixed64
	}
	return 0
}

func (x *External1) GetPUint32() uint32 {
	if x != nil && x.PUint32 != nil {
		return *x.PUint32
	}
	return 0
}

func (x *External1) GetPUint64() uint64 {
	if x != nil && x.PUint64 != nil {
		return *x.PUint64
	}
	return 0
}

func (x *External1) GetPFixed32() uint32 {
	if x != nil && x.PFixed32 != nil {
		return *x.PFixed32
	}
	return 0
}

func (x *External1) GetPFixed64() uint64 {
	if x != nil && x.PFixed64 != nil {
		return *x.PFixed64
	}
	return 0
}

func (x *External1) GetPBool() bool {
	if x != nil && x.PBool != nil {
		return *x.PBool
	}
	return false
}

func (x *External1) GetPString() string {
	if x != nil && x.PString != nil {
		return *x.PString
	}
	return ""
}

func (x *External1) GetPBytes() []byte {
	if x != nil {
		return x.PBytes
	}
	return nil
}

func (x *External1) GetPEnum1() Month1 {
	if x != nil && x.PEnum1 != nil {
		return *x.PEnum1
	}
	return Month1_Month1Unset
}

func (x *External1) GetPEnum2() Month2 {
	if x != nil && x.PEnum2 != nil {
		return *x.PEnum2
	}
	return Month2_Month2Unset
}

func (x *External1) GetPAny() *anypb.Any {
	if x != nil {
		return x.PAny
	}
	return nil
}

func (x *External1) GetPTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PTimestamp
	}
	return nil
}

func (x *External1) GetPDuration() *durationpb.Duration {
	if x != nil {
		return x.PDuration
	}
	return nil
}

func (m *External1) GetOneOfType1() isExternal1_OneOfType1 {
	if m != nil {
		return m.OneOfType1
	}
	return nil
}

func (x *External1) GetOFloat() float32 {
	if x, ok := x.GetOneOfType1().(*External1_OFloat); ok {
		return x.OFloat
	}
	return 0
}

func (x *External1) GetODouble() float64 {
	if x, ok := x.GetOneOfType1().(*External1_ODouble); ok {
		return x.ODouble
	}
	return 0
}

func (x *External1) GetOInt32() int32 {
	if x, ok := x.GetOneOfType1().(*External1_OInt32); ok {
		return x.OInt32
	}
	return 0
}

func (x *External1) GetOSint32() int32 {
	if x, ok := x.GetOneOfType1().(*External1_OSint32); ok {
		return x.OSint32
	}
	return 0
}

func (x *External1) GetOSfixed32() int32 {
	if x, ok := x.GetOneOfType1().(*External1_OSfixed32); ok {
		return x.OSfixed32
	}
	return 0
}

func (x *External1) GetOInt64() int64 {
	if x, ok := x.GetOneOfType1().(*External1_OInt64); ok {
		return x.OInt64
	}
	return 0
}

func (x *External1) GetOSint64() int64 {
	if x, ok := x.GetOneOfType1().(*External1_OSint64); ok {
		return x.OSint64
	}
	return 0
}

func (x *External1) GetOSfixed64() int64 {
	if x, ok := x.GetOneOfType1().(*External1_OSfixed64); ok {
		return x.OSfixed64
	}
	return 0
}

func (x *External1) GetOUint32() uint32 {
	if x, ok := x.GetOneOfType1().(*External1_OUint32); ok {
		return x.OUint32
	}
	return 0
}

func (x *External1) GetOUint64() uint64 {
	if x, ok := x.GetOneOfType1().(*External1_OUint64); ok {
		return x.OUint64
	}
	return 0
}

func (x *External1) GetOFixed32() uint32 {
	if x, ok := x.GetOneOfType1().(*External1_OFixed32); ok {
		return x.OFixed32
	}
	return 0
}

func (x *External1) GetOFixed64() uint64 {
	if x, ok := x.GetOneOfType1().(*External1_OFixed64); ok {
		return x.OFixed64
	}
	return 0
}

func (x *External1) GetOBool() bool {
	if x, ok := x.GetOneOfType1().(*External1_OBool); ok {
		return x.OBool
	}
	return false
}

func (x *External1) GetOString() string {
	if x, ok := x.GetOneOfType1().(*External1_OString); ok {
		return x.OString
	}
	return ""
}

func (x *External1) GetOBytes() []byte {
	if x, ok := x.GetOneOfType1().(*External1_OBytes); ok {
		return x.OBytes
	}
	return nil
}

func (x *External1) GetOEnum1() Month1 {
	if x, ok := x.GetOneOfType1().(*External1_OEnum1); ok {
		return x.OEnum1
	}
	return Month1_Month1Unset
}

func (x *External1) GetOEnum2() Month2 {
	if x, ok := x.GetOneOfType1().(*External1_OEnum2); ok {
		return x.OEnum2
	}
	return Month2_Month2Unset
}

func (x *External1) GetOAny() *anypb.Any {
	if x, ok := x.GetOneOfType1().(*External1_OAny); ok {
		return x.OAny
	}
	return nil
}

func (x *External1) GetOTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetOneOfType1().(*External1_OTimestamp); ok {
		return x.OTimestamp
	}
	return nil
}

func (x *External1) GetODuration() *durationpb.Duration {
	if x, ok := x.GetOneOfType1().(*External1_ODuration); ok {
		return x.ODuration
	}
	return nil
}

func (x *External1) GetRFloat() []float32 {
	if x != nil {
		return x.RFloat
	}
	return nil
}

func (x *External1) GetRDouble() []float64 {
	if x != nil {
		return x.RDouble
	}
	return nil
}

func (x *External1) GetRInt32() []int32 {
	if x != nil {
		return x.RInt32
	}
	return nil
}

func (x *External1) GetRSint32() []int32 {
	if x != nil {
		return x.RSint32
	}
	return nil
}

func (x *External1) GetRSfixed32() []int32 {
	if x != nil {
		return x.RSfixed32
	}
	return nil
}

func (x *External1) GetRInt64() []int64 {
	if x != nil {
		return x.RInt64
	}
	return nil
}

func (x *External1) GetRSint64() []int64 {
	if x != nil {
		return x.RSint64
	}
	return nil
}

func (x *External1) GetRSfixed64() []int64 {
	if x != nil {
		return x.RSfixed64
	}
	return nil
}

func (x *External1) GetRUint32() []uint32 {
	if x != nil {
		return x.RUint32
	}
	return nil
}

func (x *External1) GetRUint64() []uint64 {
	if x != nil {
		return x.RUint64
	}
	return nil
}

func (x *External1) GetRFixed32() []uint32 {
	if x != nil {
		return x.RFixed32
	}
	return nil
}

func (x *External1) GetRFixed64() []uint64 {
	if x != nil {
		return x.RFixed64
	}
	return nil
}

func (x *External1) GetRBool() []bool {
	if x != nil {
		return x.RBool
	}
	return nil
}

func (x *External1) GetRString() []string {
	if x != nil {
		return x.RString
	}
	return nil
}

func (x *External1) GetRBytes() [][]byte {
	if x != nil {
		return x.RBytes
	}
	return nil
}

func (x *External1) GetREnum1() []Month1 {
	if x != nil {
		return x.REnum1
	}
	return nil
}

func (x *External1) GetREnum2() []Month2 {
	if x != nil {
		return x.REnum2
	}
	return nil
}

func (x *External1) GetRAny() []*anypb.Any {
	if x != nil {
		return x.RAny
	}
	return nil
}

func (x *External1) GetRTimestamp() []*timestamppb.Timestamp {
	if x != nil {
		return x.RTimestamp
	}
	return nil
}

func (x *External1) GetRDuration() []*durationpb.Duration {
	if x != nil {
		return x.RDuration
	}
	return nil
}

func (x *External1) GetMFloat() map[string]float32 {
	if x != nil {
		return x.MFloat
	}
	return nil
}

func (x *External1) GetMDouble() map[string]float64 {
	if x != nil {
		return x.MDouble
	}
	return nil
}

func (x *External1) GetMInt32() map[string]int32 {
	if x != nil {
		return x.MInt32
	}
	return nil
}

func (x *External1) GetMSint32() map[string]int32 {
	if x != nil {
		return x.MSint32
	}
	return nil
}

func (x *External1) GetMSfixed32() map[string]int32 {
	if x != nil {
		return x.MSfixed32
	}
	return nil
}

func (x *External1) GetMInt64() map[string]int64 {
	if x != nil {
		return x.MInt64
	}
	return nil
}

func (x *External1) GetMSint64() map[string]int64 {
	if x != nil {
		return x.MSint64
	}
	return nil
}

func (x *External1) GetMSfixed64() map[string]int64 {
	if x != nil {
		return x.MSfixed64
	}
	return nil
}

func (x *External1) GetMUint32() map[string]uint32 {
	if x != nil {
		return x.MUint32
	}
	return nil
}

func (x *External1) GetMUint64() map[string]uint64 {
	if x != nil {
		return x.MUint64
	}
	return nil
}

func (x *External1) GetMFixed32() map[string]uint32 {
	if x != nil {
		return x.MFixed32
	}
	return nil
}

func (x *External1) GetMFixed64() map[string]uint64 {
	if x != nil {
		return x.MFixed64
	}
	return nil
}

func (x *External1) GetMBool() map[string]bool {
	if x != nil {
		return x.MBool
	}
	return nil
}

func (x *External1) GetMString() map[string]string {
	if x != nil {
		return x.MString
	}
	return nil
}

func (x *External1) GetMBytes() map[string][]byte {
	if x != nil {
		return x.MBytes
	}
	return nil
}

func (x *External1) GetMEnum1() map[string]Month1 {
	if x != nil {
		return x.MEnum1
	}
	return nil
}

func (x *External1) GetMEnum2() map[string]Month2 {
	if x != nil {
		return x.MEnum2
	}
	return nil
}

func (x *External1) GetMAny() map[string]*anypb.Any {
	if x != nil {
		return x.MAny
	}
	return nil
}

func (x *External1) GetMTimestamp() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.MTimestamp
	}
	return nil
}

func (x *External1) GetMDuration() map[string]*durationpb.Duration {
	if x != nil {
		return x.MDuration
	}
	return nil
}

type isExternal1_OneOfType1 interface {
	isExternal1_OneOfType1()
}

type External1_OFloat struct {
	OFloat float32 `protobuf:"fixed32,219,opt,name=o_float,json=oFloat,proto3,oneof"`
}

type External1_ODouble struct {
	ODouble float64 `protobuf:"fixed64,220,opt,name=o_double,json=oDouble,proto3,oneof"`
}

type External1_OInt32 struct {
	OInt32 int32 `protobuf:"varint,201,opt,name=o_int32,json=oInt32,proto3,oneof"`
}

type External1_OSint32 struct {
	OSint32 int32 `protobuf:"zigzag32,202,opt,name=o_sint32,json=oSint32,proto3,oneof"`
}

type External1_OSfixed32 struct {
	OSfixed32 int32 `protobuf:"fixed32,203,opt,name=o_sfixed32,json=oSfixed32,proto3,oneof"`
}

type External1_OInt64 struct {
	OInt64 int64 `protobuf:"varint,204,opt,name=o_int64,json=oInt64,proto3,oneof"`
}

type External1_OSint64 struct {
	OSint64 int64 `protobuf:"zigzag64,205,opt,name=o_sint64,json=oSint64,proto3,oneof"`
}

type External1_OSfixed64 struct {
	OSfixed64 int64 `protobuf:"fixed64,206,opt,name=o_sfixed64,json=oSfixed64,proto3,oneof"`
}

type External1_OUint32 struct {
	OUint32 uint32 `protobuf:"varint,207,opt,name=o_uint32,json=oUint32,proto3,oneof"`
}

type External1_OUint64 struct {
	OUint64 uint64 `protobuf:"varint,208,opt,name=o_uint64,json=oUint64,proto3,oneof"`
}

type External1_OFixed32 struct {
	OFixed32 uint32 `protobuf:"fixed32,209,opt,name=o_fixed32,json=oFixed32,proto3,oneof"`
}

type External1_OFixed64 struct {
	OFixed64 uint64 `protobuf:"fixed64,210,opt,name=o_fixed64,json=oFixed64,proto3,oneof"`
}

type External1_OBool struct {
	OBool bool `protobuf:"varint,211,opt,name=o_bool,json=oBool,proto3,oneof"`
}

type External1_OString struct {
	OString string `protobuf:"bytes,212,opt,name=o_string,json=oString,proto3,oneof"`
}

type External1_OBytes struct {
	OBytes []byte `protobuf:"bytes,213,opt,name=o_bytes,json=oBytes,proto3,oneof"`
}

type External1_OEnum1 struct {
	OEnum1 Month1 `protobuf:"varint,214,opt,name=o_enum1,json=oEnum1,proto3,enum=external.Month1,oneof"`
}

type External1_OEnum2 struct {
	OEnum2 Month2 `protobuf:"varint,215,opt,name=o_enum2,json=oEnum2,proto3,enum=external.Month2,oneof"`
}

type External1_OAny struct {
	OAny *anypb.Any `protobuf:"bytes,216,opt,name=o_any,json=oAny,proto3,oneof"`
}

type External1_OTimestamp struct {
	OTimestamp *timestamppb.Timestamp `protobuf:"bytes,217,opt,name=o_timestamp,json=oTimestamp,proto3,oneof"`
}

type External1_ODuration struct {
	ODuration *durationpb.Duration `protobuf:"bytes,218,opt,name=o_duration,json=oDuration,proto3,oneof"`
}

func (*External1_OFloat) isExternal1_OneOfType1() {}

func (*External1_ODouble) isExternal1_OneOfType1() {}

func (*External1_OInt32) isExternal1_OneOfType1() {}

func (*External1_OSint32) isExternal1_OneOfType1() {}

func (*External1_OSfixed32) isExternal1_OneOfType1() {}

func (*External1_OInt64) isExternal1_OneOfType1() {}

func (*External1_OSint64) isExternal1_OneOfType1() {}

func (*External1_OSfixed64) isExternal1_OneOfType1() {}

func (*External1_OUint32) isExternal1_OneOfType1() {}

func (*External1_OUint64) isExternal1_OneOfType1() {}

func (*External1_OFixed32) isExternal1_OneOfType1() {}

func (*External1_OFixed64) isExternal1_OneOfType1() {}

func (*External1_OBool) isExternal1_OneOfType1() {}

func (*External1_OString) isExternal1_OneOfType1() {}

func (*External1_OBytes) isExternal1_OneOfType1() {}

func (*External1_OEnum1) isExternal1_OneOfType1() {}

func (*External1_OEnum2) isExternal1_OneOfType1() {}

func (*External1_OAny) isExternal1_OneOfType1() {}

func (*External1_OTimestamp) isExternal1_OneOfType1() {}

func (*External1_ODuration) isExternal1_OneOfType1() {}

type External2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	P1 *External1                   `protobuf:"bytes,1,opt,name=p1,proto3" json:"p1,omitempty"`
	P2 *External2_Embed1            `protobuf:"bytes,2,opt,name=p2,proto3" json:"p2,omitempty"`
	R1 []*External1                 `protobuf:"bytes,11,rep,name=r1,proto3" json:"r1,omitempty"`
	R2 []*External2_Embed1          `protobuf:"bytes,12,rep,name=r2,proto3" json:"r2,omitempty"`
	M1 map[string]*External1        `protobuf:"bytes,21,rep,name=m1,proto3" json:"m1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	M2 map[string]*External2_Embed1 `protobuf:"bytes,22,rep,name=m2,proto3" json:"m2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *External2) Reset() {
	*x = External2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External2) ProtoMessage() {}

func (x *External2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External2.ProtoReflect.Descriptor instead.
func (*External2) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{3}
}

func (x *External2) GetP1() *External1 {
	if x != nil {
		return x.P1
	}
	return nil
}

func (x *External2) GetP2() *External2_Embed1 {
	if x != nil {
		return x.P2
	}
	return nil
}

func (x *External2) GetR1() []*External1 {
	if x != nil {
		return x.R1
	}
	return nil
}

func (x *External2) GetR2() []*External2_Embed1 {
	if x != nil {
		return x.R2
	}
	return nil
}

func (x *External2) GetM1() map[string]*External1 {
	if x != nil {
		return x.M1
	}
	return nil
}

func (x *External2) GetM2() map[string]*External2_Embed1 {
	if x != nil {
		return x.M2
	}
	return nil
}

type External3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString string `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3" json:"t_string,omitempty"`
}

func (x *External3) Reset() {
	*x = External3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External3) ProtoMessage() {}

func (x *External3) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External3.ProtoReflect.Descriptor instead.
func (*External3) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{4}
}

func (x *External3) GetTString() string {
	if x != nil {
		return x.TString
	}
	return ""
}

type EnumWeek2_Embed1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnumWeek2_Embed1) Reset() {
	*x = EnumWeek2_Embed1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumWeek2_Embed1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumWeek2_Embed1) ProtoMessage() {}

func (x *EnumWeek2_Embed1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumWeek2_Embed1.ProtoReflect.Descriptor instead.
func (*EnumWeek2_Embed1) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{1, 0}
}

type External2_Embed1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
}

func (x *External2_Embed1) Reset() {
	*x = External2_Embed1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_module_external_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External2_Embed1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External2_Embed1) ProtoMessage() {}

func (x *External2_Embed1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_module_external_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External2_Embed1.ProtoReflect.Descriptor instead.
func (*External2_Embed1) Descriptor() ([]byte, []int) {
	return file_tests_proto_module_external_proto_rawDescGZIP(), []int{3, 0}
}

func (x *External2_Embed1) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *External2_Embed1) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

var File_tests_proto_module_external_proto protoreflect.FileDescriptor

var file_tests_proto_module_external_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x09, 0x45, 0x6e, 0x75,
	0x6d, 0x57, 0x65, 0x65, 0x6b, 0x31, 0x22, 0x71, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0d,
	0x0a, 0x09, 0x57, 0x65, 0x65, 0x6b, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x65,
	0x73, 0x64, 0x61, 0x79, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73,
	0x64, 0x61, 0x79, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61,
	0x79, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x0c, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x0f, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x10, 0x12, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x45, 0x6e,
	0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x32, 0x1a, 0x7b, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x31, 0x22, 0x71, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x65,
	0x6b, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x6e, 0x64,
	0x61, 0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x61,
	0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75, 0x6e, 0x64,
	0x61, 0x79, 0x10, 0x12, 0x22, 0xfe, 0x2b, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x31, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x15, 0x0a, 0x06,
	0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x32, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x04, 0x74, 0x41, 0x6e, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x06, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x07, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x06, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x66, 0x20, 0x01, 0x28, 0x11, 0x48, 0x04, 0x52,
	0x07, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x05, 0x52, 0x09, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x06, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x69, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x07, 0x52, 0x07, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x10, 0x48, 0x08, 0x52, 0x09, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x07, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x07, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x07, 0x48, 0x0b, 0x52, 0x08, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0c, 0x52, 0x08, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x05, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x0f, 0x52, 0x06, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x07, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x31, 0x48, 0x10, 0x52, 0x06, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x07, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x32, 0x48, 0x11, 0x52, 0x06, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x05, 0x70, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x12, 0x52, 0x04, 0x70, 0x41, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x0b, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x13, 0x52, 0x0a, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x14, 0x52, 0x09, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x08,
	0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0a, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcd,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x20, 0x0a, 0x0a, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xce,
	0x01, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xcf,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd0, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e,
	0x0a, 0x09, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd1, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1e,
	0x0a, 0x09, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd2, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x18,
	0x0a, 0x06, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x6f, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0xd6, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x12, 0x2c, 0x0a, 0x07, 0x6f, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0xd7, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x32, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x2c,
	0x0a, 0x05, 0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x3e, 0x0a, 0x0b,
	0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xd9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x0a,
	0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0xbf, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x72, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0xc0, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xad, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x11, 0x52, 0x07, 0x72, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0xaf, 0x02, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x09, 0x72, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xb0, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb1, 0x02, 0x20, 0x03,
	0x28, 0x12, 0x52, 0x07, 0x72, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xb2, 0x02, 0x20, 0x03, 0x28, 0x10,
	0x52, 0x09, 0x72, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb3, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0xb4, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0xb5, 0x02, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xb6,
	0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x72, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xb7, 0x02, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x05, 0x72, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xb8, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb9,
	0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x07, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0xba, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x31, 0x52, 0x06, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x32, 0x18, 0xbb, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x52, 0x06, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0xbc,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x72, 0x41, 0x6e,
	0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0xbd, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbe, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xa3, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x31, 0x2e, 0x4d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0xa4, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x91,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3c,
	0x0a, 0x08, 0x6d, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x92, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x42, 0x0a, 0x0a,
	0x6d, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x93, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x39, 0x0a, 0x07, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x94, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x95, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6d, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x96, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x97, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x98, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x99, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x31, 0x2e, 0x4d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x6d, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9a, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x06, 0x6d,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x9b, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x31, 0x2e, 0x4d, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6d, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x9c, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x9d, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07,
	0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x9e, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0x9f, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x45, 0x6e, 0x75,
	0x6d, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0xa0, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x6d, 0x41, 0x6e, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xa1, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x31, 0x2e, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42,
	0x0a, 0x0a, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x4d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x4d, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4d,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0b, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0b, 0x4d, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4d, 0x0a, 0x09, 0x4d, 0x41, 0x6e, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x59, 0x0a, 0x0f, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0e, 0x4d, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x5f, 0x61, 0x6e, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x03, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x32, 0x12, 0x23, 0x0a, 0x02, 0x70, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x31, 0x52, 0x02, 0x70, 0x31, 0x12, 0x2a, 0x0a, 0x02, 0x70, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31,
	0x52, 0x02, 0x70, 0x32, 0x12, 0x23, 0x0a, 0x02, 0x72, 0x31, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x31, 0x52, 0x02, 0x72, 0x31, 0x12, 0x2a, 0x0a, 0x02, 0x72, 0x32, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x31, 0x52, 0x02, 0x72, 0x32, 0x12, 0x2b, 0x0a, 0x02, 0x6d, 0x31, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32, 0x2e, 0x4d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x6d, 0x31, 0x12, 0x2b, 0x0a, 0x02, 0x6d, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x32, 0x2e, 0x4d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02, 0x6d, 0x32, 0x1a,
	0x42, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x1a, 0x4a, 0x0a, 0x07, 0x4d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x51, 0x0a, 0x07, 0x4d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x26, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x33, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x5d, 0x0a, 0x06, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x31, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x70, 0x72, 0x69, 0x6c, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x79, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6e, 0x65, 0x10, 0x0f, 0x2a, 0x67, 0x0a, 0x06, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65,
	0x70, 0x74, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x63, 0x74,
	0x6f, 0x62, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x76, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x0f, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x78, 0x67, 0x6f, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x62, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_module_external_proto_rawDescOnce sync.Once
	file_tests_proto_module_external_proto_rawDescData = file_tests_proto_module_external_proto_rawDesc
)

func file_tests_proto_module_external_proto_rawDescGZIP() []byte {
	file_tests_proto_module_external_proto_rawDescOnce.Do(func() {
		file_tests_proto_module_external_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_module_external_proto_rawDescData)
	})
	return file_tests_proto_module_external_proto_rawDescData
}

var file_tests_proto_module_external_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tests_proto_module_external_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_tests_proto_module_external_proto_goTypes = []interface{}{
	(Month1)(0),                   // 0: external.Month1
	(Month2)(0),                   // 1: external.Month2
	(EnumWeek1_Week)(0),           // 2: external.EnumWeek1.Week
	(EnumWeek2_Embed1_Week)(0),    // 3: external.EnumWeek2.Embed1.Week
	(*EnumWeek1)(nil),             // 4: external.EnumWeek1
	(*EnumWeek2)(nil),             // 5: external.EnumWeek2
	(*External1)(nil),             // 6: external.External1
	(*External2)(nil),             // 7: external.External2
	(*External3)(nil),             // 8: external.External3
	(*EnumWeek2_Embed1)(nil),      // 9: external.EnumWeek2.Embed1
	nil,                           // 10: external.External1.MFloatEntry
	nil,                           // 11: external.External1.MDoubleEntry
	nil,                           // 12: external.External1.MInt32Entry
	nil,                           // 13: external.External1.MSint32Entry
	nil,                           // 14: external.External1.MSfixed32Entry
	nil,                           // 15: external.External1.MInt64Entry
	nil,                           // 16: external.External1.MSint64Entry
	nil,                           // 17: external.External1.MSfixed64Entry
	nil,                           // 18: external.External1.MUint32Entry
	nil,                           // 19: external.External1.MUint64Entry
	nil,                           // 20: external.External1.MFixed32Entry
	nil,                           // 21: external.External1.MFixed64Entry
	nil,                           // 22: external.External1.MBoolEntry
	nil,                           // 23: external.External1.MStringEntry
	nil,                           // 24: external.External1.MBytesEntry
	nil,                           // 25: external.External1.MEnum1Entry
	nil,                           // 26: external.External1.MEnum2Entry
	nil,                           // 27: external.External1.MAnyEntry
	nil,                           // 28: external.External1.MTimestampEntry
	nil,                           // 29: external.External1.MDurationEntry
	(*External2_Embed1)(nil),      // 30: external.External2.Embed1
	nil,                           // 31: external.External2.M1Entry
	nil,                           // 32: external.External2.M2Entry
	(*anypb.Any)(nil),             // 33: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 35: google.protobuf.Duration
}
var file_tests_proto_module_external_proto_depIdxs = []int32{
	0,  // 0: external.External1.t_enum1:type_name -> external.Month1
	1,  // 1: external.External1.t_enum2:type_name -> external.Month2
	33, // 2: external.External1.t_any:type_name -> google.protobuf.Any
	34, // 3: external.External1.t_timestamp:type_name -> google.protobuf.Timestamp
	35, // 4: external.External1.t_duration:type_name -> google.protobuf.Duration
	0,  // 5: external.External1.p_enum1:type_name -> external.Month1
	1,  // 6: external.External1.p_enum2:type_name -> external.Month2
	33, // 7: external.External1.p_any:type_name -> google.protobuf.Any
	34, // 8: external.External1.p_timestamp:type_name -> google.protobuf.Timestamp
	35, // 9: external.External1.p_duration:type_name -> google.protobuf.Duration
	0,  // 10: external.External1.o_enum1:type_name -> external.Month1
	1,  // 11: external.External1.o_enum2:type_name -> external.Month2
	33, // 12: external.External1.o_any:type_name -> google.protobuf.Any
	34, // 13: external.External1.o_timestamp:type_name -> google.protobuf.Timestamp
	35, // 14: external.External1.o_duration:type_name -> google.protobuf.Duration
	0,  // 15: external.External1.r_enum1:type_name -> external.Month1
	1,  // 16: external.External1.r_enum2:type_name -> external.Month2
	33, // 17: external.External1.r_any:type_name -> google.protobuf.Any
	34, // 18: external.External1.r_timestamp:type_name -> google.protobuf.Timestamp
	35, // 19: external.External1.r_duration:type_name -> google.protobuf.Duration
	10, // 20: external.External1.m_float:type_name -> external.External1.MFloatEntry
	11, // 21: external.External1.m_double:type_name -> external.External1.MDoubleEntry
	12, // 22: external.External1.m_int32:type_name -> external.External1.MInt32Entry
	13, // 23: external.External1.m_sint32:type_name -> external.External1.MSint32Entry
	14, // 24: external.External1.m_sfixed32:type_name -> external.External1.MSfixed32Entry
	15, // 25: external.External1.m_int64:type_name -> external.External1.MInt64Entry
	16, // 26: external.External1.m_sint64:type_name -> external.External1.MSint64Entry
	17, // 27: external.External1.m_sfixed64:type_name -> external.External1.MSfixed64Entry
	18, // 28: external.External1.m_uint32:type_name -> external.External1.MUint32Entry
	19, // 29: external.External1.m_uint64:type_name -> external.External1.MUint64Entry
	20, // 30: external.External1.m_fixed32:type_name -> external.External1.MFixed32Entry
	21, // 31: external.External1.m_fixed64:type_name -> external.External1.MFixed64Entry
	22, // 32: external.External1.m_bool:type_name -> external.External1.MBoolEntry
	23, // 33: external.External1.m_string:type_name -> external.External1.MStringEntry
	24, // 34: external.External1.m_bytes:type_name -> external.External1.MBytesEntry
	25, // 35: external.External1.m_enum1:type_name -> external.External1.MEnum1Entry
	26, // 36: external.External1.m_enum2:type_name -> external.External1.MEnum2Entry
	27, // 37: external.External1.m_any:type_name -> external.External1.MAnyEntry
	28, // 38: external.External1.m_timestamp:type_name -> external.External1.MTimestampEntry
	29, // 39: external.External1.m_duration:type_name -> external.External1.MDurationEntry
	6,  // 40: external.External2.p1:type_name -> external.External1
	30, // 41: external.External2.p2:type_name -> external.External2.Embed1
	6,  // 42: external.External2.r1:type_name -> external.External1
	30, // 43: external.External2.r2:type_name -> external.External2.Embed1
	31, // 44: external.External2.m1:type_name -> external.External2.M1Entry
	32, // 45: external.External2.m2:type_name -> external.External2.M2Entry
	0,  // 46: external.External1.MEnum1Entry.value:type_name -> external.Month1
	1,  // 47: external.External1.MEnum2Entry.value:type_name -> external.Month2
	33, // 48: external.External1.MAnyEntry.value:type_name -> google.protobuf.Any
	34, // 49: external.External1.MTimestampEntry.value:type_name -> google.protobuf.Timestamp
	35, // 50: external.External1.MDurationEntry.value:type_name -> google.protobuf.Duration
	6,  // 51: external.External2.M1Entry.value:type_name -> external.External1
	30, // 52: external.External2.M2Entry.value:type_name -> external.External2.Embed1
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_tests_proto_module_external_proto_init() }
func file_tests_proto_module_external_proto_init() {
	if File_tests_proto_module_external_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_module_external_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumWeek1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumWeek2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumWeek2_Embed1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_module_external_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External2_Embed1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_proto_module_external_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*External1_OFloat)(nil),
		(*External1_ODouble)(nil),
		(*External1_OInt32)(nil),
		(*External1_OSint32)(nil),
		(*External1_OSfixed32)(nil),
		(*External1_OInt64)(nil),
		(*External1_OSint64)(nil),
		(*External1_OSfixed64)(nil),
		(*External1_OUint32)(nil),
		(*External1_OUint64)(nil),
		(*External1_OFixed32)(nil),
		(*External1_OFixed64)(nil),
		(*External1_OBool)(nil),
		(*External1_OString)(nil),
		(*External1_OBytes)(nil),
		(*External1_OEnum1)(nil),
		(*External1_OEnum2)(nil),
		(*External1_OAny)(nil),
		(*External1_OTimestamp)(nil),
		(*External1_ODuration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_module_external_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_module_external_proto_goTypes,
		DependencyIndexes: file_tests_proto_module_external_proto_depIdxs,
		EnumInfos:         file_tests_proto_module_external_proto_enumTypes,
		MessageInfos:      file_tests_proto_module_external_proto_msgTypes,
	}.Build()
	File_tests_proto_module_external_proto = out.File
	file_tests_proto_module_external_proto_rawDesc = nil
	file_tests_proto_module_external_proto_goTypes = nil
	file_tests_proto_module_external_proto_depIdxs = nil
}
