// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: tests/proto/cases/empty/empty_optional.proto

package pbempty

import (
	_ "github.com/yu31/protoc-plugin-default/xgo/pb/pbdefault"
	pbexternal "github.com/yu31/protoc-plugin-default/xgo/tests/pb/pbexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EnumOptional1 used tests cases in this file.
type EnumOptional1 int32

const (
	EnumOptional1_Zero  EnumOptional1 = 0
	EnumOptional1_One   EnumOptional1 = 2
	EnumOptional1_Two   EnumOptional1 = 3
	EnumOptional1_Three EnumOptional1 = 5
	EnumOptional1_Four  EnumOptional1 = 6
	EnumOptional1_Five  EnumOptional1 = 7
	EnumOptional1_Six   EnumOptional1 = 9
	EnumOptional1_Seven EnumOptional1 = 11
	EnumOptional1_Eight EnumOptional1 = 12
	EnumOptional1_Nine  EnumOptional1 = 15
	EnumOptional1_Ten   EnumOptional1 = 17
)

// Enum value maps for EnumOptional1.
var (
	EnumOptional1_name = map[int32]string{
		0:  "Zero",
		2:  "One",
		3:  "Two",
		5:  "Three",
		6:  "Four",
		7:  "Five",
		9:  "Six",
		11: "Seven",
		12: "Eight",
		15: "Nine",
		17: "Ten",
	}
	EnumOptional1_value = map[string]int32{
		"Zero":  0,
		"One":   2,
		"Two":   3,
		"Three": 5,
		"Four":  6,
		"Five":  7,
		"Six":   9,
		"Seven": 11,
		"Eight": 12,
		"Nine":  15,
		"Ten":   17,
	}
)

func (x EnumOptional1) Enum() *EnumOptional1 {
	p := new(EnumOptional1)
	*p = x
	return p
}

func (x EnumOptional1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumOptional1) Descriptor() protoreflect.EnumDescriptor {
	return file_tests_proto_cases_empty_empty_optional_proto_enumTypes[0].Descriptor()
}

func (EnumOptional1) Type() protoreflect.EnumType {
	return &file_tests_proto_cases_empty_empty_optional_proto_enumTypes[0]
}

func (x EnumOptional1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumOptional1.Descriptor instead.
func (EnumOptional1) EnumDescriptor() ([]byte, []int) {
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP(), []int{0}
}

// MessagePlain1 used tests cases in this file.
type MessageOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
	FString4 string `protobuf:"bytes,4,opt,name=f_string4,json=fString4,proto3" json:"f_string4,omitempty"`
}

func (x *MessageOptional1) Reset() {
	*x = MessageOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOptional1) ProtoMessage() {}

func (x *MessageOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOptional1.ProtoReflect.Descriptor instead.
func (*MessageOptional1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP(), []int{0}
}

func (x *MessageOptional1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageOptional1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageOptional1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

func (x *MessageOptional1) GetFString4() string {
	if x != nil {
		return x.FString4
	}
	return ""
}

// Test cases for ignore_empty is false.
type TypeOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1    *string                           `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3,oneof" json:"f_string1,omitempty"`
	FString2    *string                           `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3,oneof" json:"f_string2,omitempty"`
	FString3    *string                           `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3,oneof" json:"f_string3,omitempty"`
	FString4    *string                           `protobuf:"bytes,4,opt,name=f_string4,json=fString4,proto3,oneof" json:"f_string4,omitempty"`
	FString5    *string                           `protobuf:"bytes,5,opt,name=f_string5,json=fString5,proto3,oneof" json:"f_string5,omitempty"`
	FString6    *string                           `protobuf:"bytes,6,opt,name=f_string6,json=fString6,proto3,oneof" json:"f_string6,omitempty"`
	FString7    *string                           `protobuf:"bytes,7,opt,name=f_string7,json=fString7,proto3,oneof" json:"f_string7,omitempty"`
	FString8    *string                           `protobuf:"bytes,8,opt,name=f_string8,json=fString8,proto3,oneof" json:"f_string8,omitempty"`
	FString9    *string                           `protobuf:"bytes,9,opt,name=f_string9,json=fString9,proto3,oneof" json:"f_string9,omitempty"`
	FInt32      *int32                            `protobuf:"varint,11,opt,name=f_int32,json=fInt32,proto3,oneof" json:"f_int32,omitempty"`
	FInt64      *int64                            `protobuf:"varint,12,opt,name=f_int64,json=fInt64,proto3,oneof" json:"f_int64,omitempty"`
	FUint32     *uint32                           `protobuf:"varint,13,opt,name=f_uint32,json=fUint32,proto3,oneof" json:"f_uint32,omitempty"`
	FUint64     *uint64                           `protobuf:"varint,14,opt,name=f_uint64,json=fUint64,proto3,oneof" json:"f_uint64,omitempty"`
	FSint32     *int32                            `protobuf:"zigzag32,15,opt,name=f_sint32,json=fSint32,proto3,oneof" json:"f_sint32,omitempty"`
	FSint64     *int64                            `protobuf:"zigzag64,16,opt,name=f_sint64,json=fSint64,proto3,oneof" json:"f_sint64,omitempty"`
	FSfixed32   *int32                            `protobuf:"fixed32,17,opt,name=f_sfixed32,json=fSfixed32,proto3,oneof" json:"f_sfixed32,omitempty"`
	FSfixed64   *int64                            `protobuf:"fixed64,18,opt,name=f_sfixed64,json=fSfixed64,proto3,oneof" json:"f_sfixed64,omitempty"`
	FFixed32    *uint32                           `protobuf:"fixed32,19,opt,name=f_fixed32,json=fFixed32,proto3,oneof" json:"f_fixed32,omitempty"`
	FFixed64    *uint64                           `protobuf:"fixed64,20,opt,name=f_fixed64,json=fFixed64,proto3,oneof" json:"f_fixed64,omitempty"`
	FFloat      *float32                          `protobuf:"fixed32,21,opt,name=f_float,json=fFloat,proto3,oneof" json:"f_float,omitempty"`
	FDouble     *float64                          `protobuf:"fixed64,22,opt,name=f_double,json=fDouble,proto3,oneof" json:"f_double,omitempty"`
	FBool1      *bool                             `protobuf:"varint,31,opt,name=f_bool1,json=fBool1,proto3,oneof" json:"f_bool1,omitempty"`
	FBool2      *bool                             `protobuf:"varint,32,opt,name=f_bool2,json=fBool2,proto3,oneof" json:"f_bool2,omitempty"`
	FBytes1     []byte                            `protobuf:"bytes,41,opt,name=f_bytes1,json=fBytes1,proto3,oneof" json:"f_bytes1,omitempty"`
	FBytes2     []byte                            `protobuf:"bytes,42,opt,name=f_bytes2,json=fBytes2,proto3,oneof" json:"f_bytes2,omitempty"`
	FEnum1      *MessageOptional1                 `protobuf:"bytes,51,opt,name=f_enum1,json=fEnum1,proto3,oneof" json:"f_enum1,omitempty"`
	FEnum2      *MessageOptional1                 `protobuf:"bytes,52,opt,name=f_enum2,json=fEnum2,proto3,oneof" json:"f_enum2,omitempty"`
	FEnum3      *pbexternal.Month1                `protobuf:"varint,53,opt,name=f_enum3,json=fEnum3,proto3,enum=external.Month1,oneof" json:"f_enum3,omitempty"`
	FEnum4      *pbexternal.Month2                `protobuf:"varint,54,opt,name=f_enum4,json=fEnum4,proto3,enum=external.Month2,oneof" json:"f_enum4,omitempty"`
	FEnum5      *pbexternal.EnumWeek1_Week        `protobuf:"varint,55,opt,name=f_enum5,json=fEnum5,proto3,enum=external.EnumWeek1_Week,oneof" json:"f_enum5,omitempty"`
	FEnum6      *pbexternal.EnumWeek2_Embed1_Week `protobuf:"varint,56,opt,name=f_enum6,json=fEnum6,proto3,enum=external.EnumWeek2_Embed1_Week,oneof" json:"f_enum6,omitempty"`
	FEnum7      *EnumCommon1                      `protobuf:"varint,57,opt,name=f_enum7,json=fEnum7,proto3,enum=type_common.EnumCommon1,oneof" json:"f_enum7,omitempty"`
	FDuration1  *durationpb.Duration              `protobuf:"bytes,61,opt,name=f_duration1,json=fDuration1,proto3,oneof" json:"f_duration1,omitempty"`
	FDuration2  *durationpb.Duration              `protobuf:"bytes,62,opt,name=f_duration2,json=fDuration2,proto3,oneof" json:"f_duration2,omitempty"`
	FTimestamp1 *timestamppb.Timestamp            `protobuf:"bytes,63,opt,name=f_timestamp1,json=fTimestamp1,proto3,oneof" json:"f_timestamp1,omitempty"`
	FTimestamp2 *timestamppb.Timestamp            `protobuf:"bytes,64,opt,name=f_timestamp2,json=fTimestamp2,proto3,oneof" json:"f_timestamp2,omitempty"`
	FMessage11  *MessageOptional1                 `protobuf:"bytes,71,opt,name=f_message11,json=fMessage11,proto3,oneof" json:"f_message11,omitempty"`
	FMessage12  *MessageOptional1_Embed1          `protobuf:"bytes,72,opt,name=f_message12,json=fMessage12,proto3,oneof" json:"f_message12,omitempty"`
	FMessage13  *MessageOptional1_Embed1_Embed2   `protobuf:"bytes,73,opt,name=f_message13,json=fMessage13,proto3,oneof" json:"f_message13,omitempty"`
	FMessage14  *pbexternal.External1             `protobuf:"bytes,74,opt,name=f_message14,json=fMessage14,proto3,oneof" json:"f_message14,omitempty"`
	FMessage15  *pbexternal.External2_Embed1      `protobuf:"bytes,75,opt,name=f_message15,json=fMessage15,proto3,oneof" json:"f_message15,omitempty"`
	FMessage16  *MessageCommon1                   `protobuf:"bytes,76,opt,name=f_message16,json=fMessage16,proto3,oneof" json:"f_message16,omitempty"`
	FMessage17  *MessageCommon1_Embed1            `protobuf:"bytes,77,opt,name=f_message17,json=fMessage17,proto3,oneof" json:"f_message17,omitempty"`
	FMessage18  *MessageCommon1_Embed1_Embed2     `protobuf:"bytes,78,opt,name=f_message18,json=fMessage18,proto3,oneof" json:"f_message18,omitempty"`
	FMessage21  *MessageOptional1                 `protobuf:"bytes,81,opt,name=f_message21,json=fMessage21,proto3,oneof" json:"f_message21,omitempty"`
	FMessage22  *MessageOptional1_Embed1          `protobuf:"bytes,82,opt,name=f_message22,json=fMessage22,proto3,oneof" json:"f_message22,omitempty"`
	FMessage23  *MessageOptional1_Embed1_Embed2   `protobuf:"bytes,83,opt,name=f_message23,json=fMessage23,proto3,oneof" json:"f_message23,omitempty"`
	FMessage24  *pbexternal.External1             `protobuf:"bytes,84,opt,name=f_message24,json=fMessage24,proto3,oneof" json:"f_message24,omitempty"`
	FMessage25  *pbexternal.External2_Embed1      `protobuf:"bytes,85,opt,name=f_message25,json=fMessage25,proto3,oneof" json:"f_message25,omitempty"`
	FMessage26  *MessageCommon1                   `protobuf:"bytes,86,opt,name=f_message26,json=fMessage26,proto3,oneof" json:"f_message26,omitempty"`
	FMessage27  *MessageCommon1_Embed1            `protobuf:"bytes,87,opt,name=f_message27,json=fMessage27,proto3,oneof" json:"f_message27,omitempty"`
	FMessage28  *MessageCommon1_Embed1_Embed2     `protobuf:"bytes,88,opt,name=f_message28,json=fMessage28,proto3,oneof" json:"f_message28,omitempty"`
	FAny1       *anypb.Any                        `protobuf:"bytes,101,opt,name=f_any1,json=fAny1,proto3,oneof" json:"f_any1,omitempty"`
	FAny2       *anypb.Any                        `protobuf:"bytes,102,opt,name=f_any2,json=fAny2,proto3,oneof" json:"f_any2,omitempty"`
	FAny3       *anypb.Any                        `protobuf:"bytes,103,opt,name=f_any3,json=fAny3,proto3,oneof" json:"f_any3,omitempty"`
	FAny4       *anypb.Any                        `protobuf:"bytes,104,opt,name=f_any4,json=fAny4,proto3,oneof" json:"f_any4,omitempty"`
	FAny5       *anypb.Any                        `protobuf:"bytes,105,opt,name=f_any5,json=fAny5,proto3,oneof" json:"f_any5,omitempty"`
	FAny6       *anypb.Any                        `protobuf:"bytes,106,opt,name=f_any6,json=fAny6,proto3,oneof" json:"f_any6,omitempty"`
	FAny7       *anypb.Any                        `protobuf:"bytes,107,opt,name=f_any7,json=fAny7,proto3,oneof" json:"f_any7,omitempty"`
	FAny8       *anypb.Any                        `protobuf:"bytes,108,opt,name=f_any8,json=fAny8,proto3,oneof" json:"f_any8,omitempty"`
	FAny9       *anypb.Any                        `protobuf:"bytes,109,opt,name=f_any9,json=fAny9,proto3,oneof" json:"f_any9,omitempty"`
}

func (x *TypeOptional1) Reset() {
	*x = TypeOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeOptional1) ProtoMessage() {}

func (x *TypeOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeOptional1.ProtoReflect.Descriptor instead.
func (*TypeOptional1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP(), []int{1}
}

func (x *TypeOptional1) GetFString1() string {
	if x != nil && x.FString1 != nil {
		return *x.FString1
	}
	return ""
}

func (x *TypeOptional1) GetFString2() string {
	if x != nil && x.FString2 != nil {
		return *x.FString2
	}
	return ""
}

func (x *TypeOptional1) GetFString3() string {
	if x != nil && x.FString3 != nil {
		return *x.FString3
	}
	return ""
}

func (x *TypeOptional1) GetFString4() string {
	if x != nil && x.FString4 != nil {
		return *x.FString4
	}
	return ""
}

func (x *TypeOptional1) GetFString5() string {
	if x != nil && x.FString5 != nil {
		return *x.FString5
	}
	return ""
}

func (x *TypeOptional1) GetFString6() string {
	if x != nil && x.FString6 != nil {
		return *x.FString6
	}
	return ""
}

func (x *TypeOptional1) GetFString7() string {
	if x != nil && x.FString7 != nil {
		return *x.FString7
	}
	return ""
}

func (x *TypeOptional1) GetFString8() string {
	if x != nil && x.FString8 != nil {
		return *x.FString8
	}
	return ""
}

func (x *TypeOptional1) GetFString9() string {
	if x != nil && x.FString9 != nil {
		return *x.FString9
	}
	return ""
}

func (x *TypeOptional1) GetFInt32() int32 {
	if x != nil && x.FInt32 != nil {
		return *x.FInt32
	}
	return 0
}

func (x *TypeOptional1) GetFInt64() int64 {
	if x != nil && x.FInt64 != nil {
		return *x.FInt64
	}
	return 0
}

func (x *TypeOptional1) GetFUint32() uint32 {
	if x != nil && x.FUint32 != nil {
		return *x.FUint32
	}
	return 0
}

func (x *TypeOptional1) GetFUint64() uint64 {
	if x != nil && x.FUint64 != nil {
		return *x.FUint64
	}
	return 0
}

func (x *TypeOptional1) GetFSint32() int32 {
	if x != nil && x.FSint32 != nil {
		return *x.FSint32
	}
	return 0
}

func (x *TypeOptional1) GetFSint64() int64 {
	if x != nil && x.FSint64 != nil {
		return *x.FSint64
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed32() int32 {
	if x != nil && x.FSfixed32 != nil {
		return *x.FSfixed32
	}
	return 0
}

func (x *TypeOptional1) GetFSfixed64() int64 {
	if x != nil && x.FSfixed64 != nil {
		return *x.FSfixed64
	}
	return 0
}

func (x *TypeOptional1) GetFFixed32() uint32 {
	if x != nil && x.FFixed32 != nil {
		return *x.FFixed32
	}
	return 0
}

func (x *TypeOptional1) GetFFixed64() uint64 {
	if x != nil && x.FFixed64 != nil {
		return *x.FFixed64
	}
	return 0
}

func (x *TypeOptional1) GetFFloat() float32 {
	if x != nil && x.FFloat != nil {
		return *x.FFloat
	}
	return 0
}

func (x *TypeOptional1) GetFDouble() float64 {
	if x != nil && x.FDouble != nil {
		return *x.FDouble
	}
	return 0
}

func (x *TypeOptional1) GetFBool1() bool {
	if x != nil && x.FBool1 != nil {
		return *x.FBool1
	}
	return false
}

func (x *TypeOptional1) GetFBool2() bool {
	if x != nil && x.FBool2 != nil {
		return *x.FBool2
	}
	return false
}

func (x *TypeOptional1) GetFBytes1() []byte {
	if x != nil {
		return x.FBytes1
	}
	return nil
}

func (x *TypeOptional1) GetFBytes2() []byte {
	if x != nil {
		return x.FBytes2
	}
	return nil
}

func (x *TypeOptional1) GetFEnum1() *MessageOptional1 {
	if x != nil {
		return x.FEnum1
	}
	return nil
}

func (x *TypeOptional1) GetFEnum2() *MessageOptional1 {
	if x != nil {
		return x.FEnum2
	}
	return nil
}

func (x *TypeOptional1) GetFEnum3() pbexternal.Month1 {
	if x != nil && x.FEnum3 != nil {
		return *x.FEnum3
	}
	return pbexternal.Month1(0)
}

func (x *TypeOptional1) GetFEnum4() pbexternal.Month2 {
	if x != nil && x.FEnum4 != nil {
		return *x.FEnum4
	}
	return pbexternal.Month2(0)
}

func (x *TypeOptional1) GetFEnum5() pbexternal.EnumWeek1_Week {
	if x != nil && x.FEnum5 != nil {
		return *x.FEnum5
	}
	return pbexternal.EnumWeek1_Week(0)
}

func (x *TypeOptional1) GetFEnum6() pbexternal.EnumWeek2_Embed1_Week {
	if x != nil && x.FEnum6 != nil {
		return *x.FEnum6
	}
	return pbexternal.EnumWeek2_Embed1_Week(0)
}

func (x *TypeOptional1) GetFEnum7() EnumCommon1 {
	if x != nil && x.FEnum7 != nil {
		return *x.FEnum7
	}
	return EnumCommon1_Zero
}

func (x *TypeOptional1) GetFDuration1() *durationpb.Duration {
	if x != nil {
		return x.FDuration1
	}
	return nil
}

func (x *TypeOptional1) GetFDuration2() *durationpb.Duration {
	if x != nil {
		return x.FDuration2
	}
	return nil
}

func (x *TypeOptional1) GetFTimestamp1() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp1
	}
	return nil
}

func (x *TypeOptional1) GetFTimestamp2() *timestamppb.Timestamp {
	if x != nil {
		return x.FTimestamp2
	}
	return nil
}

func (x *TypeOptional1) GetFMessage11() *MessageOptional1 {
	if x != nil {
		return x.FMessage11
	}
	return nil
}

func (x *TypeOptional1) GetFMessage12() *MessageOptional1_Embed1 {
	if x != nil {
		return x.FMessage12
	}
	return nil
}

func (x *TypeOptional1) GetFMessage13() *MessageOptional1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage13
	}
	return nil
}

func (x *TypeOptional1) GetFMessage14() *pbexternal.External1 {
	if x != nil {
		return x.FMessage14
	}
	return nil
}

func (x *TypeOptional1) GetFMessage15() *pbexternal.External2_Embed1 {
	if x != nil {
		return x.FMessage15
	}
	return nil
}

func (x *TypeOptional1) GetFMessage16() *MessageCommon1 {
	if x != nil {
		return x.FMessage16
	}
	return nil
}

func (x *TypeOptional1) GetFMessage17() *MessageCommon1_Embed1 {
	if x != nil {
		return x.FMessage17
	}
	return nil
}

func (x *TypeOptional1) GetFMessage18() *MessageCommon1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage18
	}
	return nil
}

func (x *TypeOptional1) GetFMessage21() *MessageOptional1 {
	if x != nil {
		return x.FMessage21
	}
	return nil
}

func (x *TypeOptional1) GetFMessage22() *MessageOptional1_Embed1 {
	if x != nil {
		return x.FMessage22
	}
	return nil
}

func (x *TypeOptional1) GetFMessage23() *MessageOptional1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage23
	}
	return nil
}

func (x *TypeOptional1) GetFMessage24() *pbexternal.External1 {
	if x != nil {
		return x.FMessage24
	}
	return nil
}

func (x *TypeOptional1) GetFMessage25() *pbexternal.External2_Embed1 {
	if x != nil {
		return x.FMessage25
	}
	return nil
}

func (x *TypeOptional1) GetFMessage26() *MessageCommon1 {
	if x != nil {
		return x.FMessage26
	}
	return nil
}

func (x *TypeOptional1) GetFMessage27() *MessageCommon1_Embed1 {
	if x != nil {
		return x.FMessage27
	}
	return nil
}

func (x *TypeOptional1) GetFMessage28() *MessageCommon1_Embed1_Embed2 {
	if x != nil {
		return x.FMessage28
	}
	return nil
}

func (x *TypeOptional1) GetFAny1() *anypb.Any {
	if x != nil {
		return x.FAny1
	}
	return nil
}

func (x *TypeOptional1) GetFAny2() *anypb.Any {
	if x != nil {
		return x.FAny2
	}
	return nil
}

func (x *TypeOptional1) GetFAny3() *anypb.Any {
	if x != nil {
		return x.FAny3
	}
	return nil
}

func (x *TypeOptional1) GetFAny4() *anypb.Any {
	if x != nil {
		return x.FAny4
	}
	return nil
}

func (x *TypeOptional1) GetFAny5() *anypb.Any {
	if x != nil {
		return x.FAny5
	}
	return nil
}

func (x *TypeOptional1) GetFAny6() *anypb.Any {
	if x != nil {
		return x.FAny6
	}
	return nil
}

func (x *TypeOptional1) GetFAny7() *anypb.Any {
	if x != nil {
		return x.FAny7
	}
	return nil
}

func (x *TypeOptional1) GetFAny8() *anypb.Any {
	if x != nil {
		return x.FAny8
	}
	return nil
}

func (x *TypeOptional1) GetFAny9() *anypb.Any {
	if x != nil {
		return x.FAny9
	}
	return nil
}

type MessageOptional1_Embed1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
	FString4 string `protobuf:"bytes,4,opt,name=f_string4,json=fString4,proto3" json:"f_string4,omitempty"`
}

func (x *MessageOptional1_Embed1) Reset() {
	*x = MessageOptional1_Embed1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOptional1_Embed1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOptional1_Embed1) ProtoMessage() {}

func (x *MessageOptional1_Embed1) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOptional1_Embed1.ProtoReflect.Descriptor instead.
func (*MessageOptional1_Embed1) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MessageOptional1_Embed1) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageOptional1_Embed1) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageOptional1_Embed1) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

func (x *MessageOptional1_Embed1) GetFString4() string {
	if x != nil {
		return x.FString4
	}
	return ""
}

type MessageOptional1_Embed1_Embed2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FString1 string `protobuf:"bytes,1,opt,name=f_string1,json=fString1,proto3" json:"f_string1,omitempty"`
	FString2 string `protobuf:"bytes,2,opt,name=f_string2,json=fString2,proto3" json:"f_string2,omitempty"`
	FString3 string `protobuf:"bytes,3,opt,name=f_string3,json=fString3,proto3" json:"f_string3,omitempty"`
	FString4 string `protobuf:"bytes,4,opt,name=f_string4,json=fString4,proto3" json:"f_string4,omitempty"`
}

func (x *MessageOptional1_Embed1_Embed2) Reset() {
	*x = MessageOptional1_Embed1_Embed2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageOptional1_Embed1_Embed2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageOptional1_Embed1_Embed2) ProtoMessage() {}

func (x *MessageOptional1_Embed1_Embed2) ProtoReflect() protoreflect.Message {
	mi := &file_tests_proto_cases_empty_empty_optional_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageOptional1_Embed1_Embed2.ProtoReflect.Descriptor instead.
func (*MessageOptional1_Embed1_Embed2) Descriptor() ([]byte, []int) {
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MessageOptional1_Embed1_Embed2) GetFString1() string {
	if x != nil {
		return x.FString1
	}
	return ""
}

func (x *MessageOptional1_Embed1_Embed2) GetFString2() string {
	if x != nil {
		return x.FString2
	}
	return ""
}

func (x *MessageOptional1_Embed1_Embed2) GetFString3() string {
	if x != nil {
		return x.FString3
	}
	return ""
}

func (x *MessageOptional1_Embed1_Embed2) GetFString4() string {
	if x != nil {
		return x.FString4
	}
	return ""
}

var File_tests_proto_cases_empty_empty_optional_proto protoreflect.FileDescriptor

var file_tests_proto_cases_empty_empty_optional_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc,
	0x03, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x31, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00,
	0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x23, 0x0a, 0x09, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa,
	0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12,
	0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x1a,
	0xab, 0x02, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x23, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x52, 0x08, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x52,
	0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x1a, 0x94, 0x01, 0x0a, 0x06, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x32, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x23, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0xe2, 0x1e,
	0x02, 0x0a, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x21, 0x0a,
	0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x22, 0xa2, 0x22,
	0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12,
	0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x01, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x02,
	0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x04, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x05, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x36, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04,
	0x0a, 0x02, 0x0a, 0x00, 0x48, 0x06, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00,
	0x48, 0x07, 0x52, 0x08, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x08, 0x52, 0x08,
	0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0xe2,
	0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x09, 0x52, 0x06, 0x66, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x0a, 0x52, 0x06,
	0x66, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xfa, 0xe2, 0x1e,
	0x00, 0x48, 0x0b, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x0c, 0x52, 0x07, 0x66, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x08, 0x66, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x11, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x0d, 0x52, 0x07, 0x66,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06, 0xfa, 0xe2, 0x1e,
	0x02, 0x0a, 0x00, 0x48, 0x0e, 0x52, 0x07, 0x66, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x0f, 0x52, 0x09, 0x66,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x66,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x10, 0x48,
	0x10, 0x52, 0x09, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x09, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x11, 0x52, 0x08,
	0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x66,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x42, 0x08,
	0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x12, 0x52, 0x08, 0x66, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00,
	0x48, 0x13, 0x52, 0x06, 0x66, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x08, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x14, 0x52, 0x07, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x15, 0x52, 0x06,
	0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x66, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04,
	0x0a, 0x02, 0x0a, 0x00, 0x48, 0x16, 0x52, 0x06, 0x66, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x17, 0x52, 0x07, 0x66, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x31, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a,
	0x02, 0x0a, 0x00, 0x48, 0x18, 0x52, 0x07, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x31, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x19,
	0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x07, 0x66,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x42, 0x06,
	0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x1a, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x31, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x1b, 0x52, 0x06,
	0x66, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x34, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x48, 0x1c, 0x52, 0x06,
	0x66, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x35, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b, 0x31, 0x2e,
	0x57, 0x65, 0x65, 0x6b, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x1d,
	0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x35, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x66,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x36, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x57, 0x65, 0x65, 0x6b,
	0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x08, 0xfa,
	0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x1e, 0x52, 0x06, 0x66, 0x45, 0x6e, 0x75, 0x6d,
	0x36, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x37, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42,
	0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x1f, 0x52, 0x06, 0x66, 0x45, 0x6e,
	0x75, 0x6d, 0x37, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0b, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x20,
	0x52, 0x0a, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x0b, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x21, 0x52, 0x0a, 0x66, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xfa, 0xe2,
	0x1e, 0x00, 0x48, 0x22, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x32, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x23, 0x52, 0x0b, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x32, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x42,
	0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x24, 0x52, 0x0a, 0x66, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x32, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00,
	0x48, 0x25, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x33,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x26, 0x52, 0x0a,
	0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x33, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x34, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x31, 0x48, 0x27, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x35, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a,
	0x02, 0x0a, 0x00, 0x48, 0x28, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x35, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x36, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00,
	0x48, 0x29, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x36, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x37,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04,
	0x0a, 0x02, 0x0a, 0x00, 0x48, 0x2a, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x37, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x38, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x32, 0x48, 0x2b, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x38, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x31, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x42, 0x08, 0xfa,
	0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x2c, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x31, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x32, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x2d,
	0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x33, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x32, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x2e, 0x52, 0x0a, 0x66, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x33, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x66,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x34, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x31, 0x48, 0x2f, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x32, 0x35, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x32,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a,
	0x00, 0x48, 0x30, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x35, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x36, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x31, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x31, 0x52, 0x0a,
	0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x36, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x37, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x31, 0x48, 0x32, 0x52, 0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x37, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x38, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x31,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x32, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00, 0x48, 0x33, 0x52,
	0x0a, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x38, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x34,
	0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x31, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x5f,
	0x61, 0x6e, 0x79, 0x32, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x35, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x33, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x04, 0xfa, 0xe2, 0x1e, 0x00,
	0x48, 0x36, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x33, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x5f, 0x61, 0x6e, 0x79, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x37, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x35, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x38,
	0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x35, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x5f,
	0x61, 0x6e, 0x79, 0x36, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x39, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x36, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06,
	0x66, 0x5f, 0x61, 0x6e, 0x79, 0x37, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x42, 0x06, 0xfa, 0xe2, 0x1e, 0x02, 0x0a, 0x00, 0x48, 0x3a, 0x52, 0x05, 0x66, 0x41,
	0x6e, 0x79, 0x37, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x38,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x04, 0xfa, 0xe2,
	0x1e, 0x00, 0x48, 0x3b, 0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x38, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x39, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x42, 0x08, 0xfa, 0xe2, 0x1e, 0x04, 0x0a, 0x02, 0x0a, 0x00, 0x48, 0x3c,
	0x52, 0x05, 0x66, 0x41, 0x6e, 0x79, 0x39, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x66, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x35, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x36, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x37, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x31, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x32, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x33, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x34, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x35, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x36, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x37, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x38, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x31, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x32, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x33, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x34, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x35, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x36, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x37, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x38, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x5f, 0x61, 0x6e, 0x79, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x33,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x5f, 0x61, 0x6e, 0x79, 0x35, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79,
	0x36, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x37, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x38, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x5f, 0x61, 0x6e,
	0x79, 0x39, 0x2a, 0x7c, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6f,
	0x75, 0x72, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x65, 0x76, 0x65, 0x6e,
	0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67, 0x68, 0x74, 0x10, 0x0c, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x65, 0x6e, 0x10, 0x11,
	0x42, 0x16, 0x5a, 0x14, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x62, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tests_proto_cases_empty_empty_optional_proto_rawDescOnce sync.Once
	file_tests_proto_cases_empty_empty_optional_proto_rawDescData = file_tests_proto_cases_empty_empty_optional_proto_rawDesc
)

func file_tests_proto_cases_empty_empty_optional_proto_rawDescGZIP() []byte {
	file_tests_proto_cases_empty_empty_optional_proto_rawDescOnce.Do(func() {
		file_tests_proto_cases_empty_empty_optional_proto_rawDescData = protoimpl.X.CompressGZIP(file_tests_proto_cases_empty_empty_optional_proto_rawDescData)
	})
	return file_tests_proto_cases_empty_empty_optional_proto_rawDescData
}

var file_tests_proto_cases_empty_empty_optional_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tests_proto_cases_empty_empty_optional_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tests_proto_cases_empty_empty_optional_proto_goTypes = []interface{}{
	(EnumOptional1)(0),                     // 0: empty_optional.EnumOptional1
	(*MessageOptional1)(nil),               // 1: empty_optional.MessageOptional1
	(*TypeOptional1)(nil),                  // 2: empty_optional.TypeOptional1
	(*MessageOptional1_Embed1)(nil),        // 3: empty_optional.MessageOptional1.Embed1
	(*MessageOptional1_Embed1_Embed2)(nil), // 4: empty_optional.MessageOptional1.Embed1.Embed2
	(pbexternal.Month1)(0),                 // 5: external.Month1
	(pbexternal.Month2)(0),                 // 6: external.Month2
	(pbexternal.EnumWeek1_Week)(0),         // 7: external.EnumWeek1.Week
	(pbexternal.EnumWeek2_Embed1_Week)(0),  // 8: external.EnumWeek2.Embed1.Week
	(EnumCommon1)(0),                       // 9: type_common.EnumCommon1
	(*durationpb.Duration)(nil),            // 10: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),          // 11: google.protobuf.Timestamp
	(*pbexternal.External1)(nil),           // 12: external.External1
	(*pbexternal.External2_Embed1)(nil),    // 13: external.External2.Embed1
	(*MessageCommon1)(nil),                 // 14: type_common.MessageCommon1
	(*MessageCommon1_Embed1)(nil),          // 15: type_common.MessageCommon1.Embed1
	(*MessageCommon1_Embed1_Embed2)(nil),   // 16: type_common.MessageCommon1.Embed1.Embed2
	(*anypb.Any)(nil),                      // 17: google.protobuf.Any
}
var file_tests_proto_cases_empty_empty_optional_proto_depIdxs = []int32{
	1,  // 0: empty_optional.TypeOptional1.f_enum1:type_name -> empty_optional.MessageOptional1
	1,  // 1: empty_optional.TypeOptional1.f_enum2:type_name -> empty_optional.MessageOptional1
	5,  // 2: empty_optional.TypeOptional1.f_enum3:type_name -> external.Month1
	6,  // 3: empty_optional.TypeOptional1.f_enum4:type_name -> external.Month2
	7,  // 4: empty_optional.TypeOptional1.f_enum5:type_name -> external.EnumWeek1.Week
	8,  // 5: empty_optional.TypeOptional1.f_enum6:type_name -> external.EnumWeek2.Embed1.Week
	9,  // 6: empty_optional.TypeOptional1.f_enum7:type_name -> type_common.EnumCommon1
	10, // 7: empty_optional.TypeOptional1.f_duration1:type_name -> google.protobuf.Duration
	10, // 8: empty_optional.TypeOptional1.f_duration2:type_name -> google.protobuf.Duration
	11, // 9: empty_optional.TypeOptional1.f_timestamp1:type_name -> google.protobuf.Timestamp
	11, // 10: empty_optional.TypeOptional1.f_timestamp2:type_name -> google.protobuf.Timestamp
	1,  // 11: empty_optional.TypeOptional1.f_message11:type_name -> empty_optional.MessageOptional1
	3,  // 12: empty_optional.TypeOptional1.f_message12:type_name -> empty_optional.MessageOptional1.Embed1
	4,  // 13: empty_optional.TypeOptional1.f_message13:type_name -> empty_optional.MessageOptional1.Embed1.Embed2
	12, // 14: empty_optional.TypeOptional1.f_message14:type_name -> external.External1
	13, // 15: empty_optional.TypeOptional1.f_message15:type_name -> external.External2.Embed1
	14, // 16: empty_optional.TypeOptional1.f_message16:type_name -> type_common.MessageCommon1
	15, // 17: empty_optional.TypeOptional1.f_message17:type_name -> type_common.MessageCommon1.Embed1
	16, // 18: empty_optional.TypeOptional1.f_message18:type_name -> type_common.MessageCommon1.Embed1.Embed2
	1,  // 19: empty_optional.TypeOptional1.f_message21:type_name -> empty_optional.MessageOptional1
	3,  // 20: empty_optional.TypeOptional1.f_message22:type_name -> empty_optional.MessageOptional1.Embed1
	4,  // 21: empty_optional.TypeOptional1.f_message23:type_name -> empty_optional.MessageOptional1.Embed1.Embed2
	12, // 22: empty_optional.TypeOptional1.f_message24:type_name -> external.External1
	13, // 23: empty_optional.TypeOptional1.f_message25:type_name -> external.External2.Embed1
	14, // 24: empty_optional.TypeOptional1.f_message26:type_name -> type_common.MessageCommon1
	15, // 25: empty_optional.TypeOptional1.f_message27:type_name -> type_common.MessageCommon1.Embed1
	16, // 26: empty_optional.TypeOptional1.f_message28:type_name -> type_common.MessageCommon1.Embed1.Embed2
	17, // 27: empty_optional.TypeOptional1.f_any1:type_name -> google.protobuf.Any
	17, // 28: empty_optional.TypeOptional1.f_any2:type_name -> google.protobuf.Any
	17, // 29: empty_optional.TypeOptional1.f_any3:type_name -> google.protobuf.Any
	17, // 30: empty_optional.TypeOptional1.f_any4:type_name -> google.protobuf.Any
	17, // 31: empty_optional.TypeOptional1.f_any5:type_name -> google.protobuf.Any
	17, // 32: empty_optional.TypeOptional1.f_any6:type_name -> google.protobuf.Any
	17, // 33: empty_optional.TypeOptional1.f_any7:type_name -> google.protobuf.Any
	17, // 34: empty_optional.TypeOptional1.f_any8:type_name -> google.protobuf.Any
	17, // 35: empty_optional.TypeOptional1.f_any9:type_name -> google.protobuf.Any
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_tests_proto_cases_empty_empty_optional_proto_init() }
func file_tests_proto_cases_empty_empty_optional_proto_init() {
	if File_tests_proto_cases_empty_empty_optional_proto != nil {
		return
	}
	file_tests_proto_cases_empty_empty_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tests_proto_cases_empty_empty_optional_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_empty_empty_optional_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_empty_empty_optional_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOptional1_Embed1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tests_proto_cases_empty_empty_optional_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageOptional1_Embed1_Embed2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tests_proto_cases_empty_empty_optional_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tests_proto_cases_empty_empty_optional_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tests_proto_cases_empty_empty_optional_proto_goTypes,
		DependencyIndexes: file_tests_proto_cases_empty_empty_optional_proto_depIdxs,
		EnumInfos:         file_tests_proto_cases_empty_empty_optional_proto_enumTypes,
		MessageInfos:      file_tests_proto_cases_empty_empty_optional_proto_msgTypes,
	}.Build()
	File_tests_proto_cases_empty_empty_optional_proto = out.File
	file_tests_proto_cases_empty_empty_optional_proto_rawDesc = nil
	file_tests_proto_cases_empty_empty_optional_proto_goTypes = nil
	file_tests_proto_cases_empty_empty_optional_proto_depIdxs = nil
}
